---
layout:     post
title:      "问题"
subtitle:   "Java面试问题"
date:       2021-06-10
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
tags:
  - Java面试
  - 笔记

---

> 面试的部分笔记





#### **math.round的用法？**

四舍六入五看前面一位单双（单就进，双就舍）源码就是加上0.5之后向下取整。  



#### **IO与NIO**

IO是面向流的，NIO是面向块，也可以说是面向缓存的。

IO是阻塞的，比如当你在进行一个读写时，必须要等他做完，才可以做其他事情。NIO是不需要等它读写完毕就可以做其他事情，不会阻塞。

IO是没有选择器的，一个请求就对应一个线程。NIO可以使用选择器，用一个线程来管理多个通道。



#### **如何将字符串进行反转**

```java
public class Reverse {
    public static void main(String[] args) {
        String str = "pengyujie";
        StringBuffer sb = new StringBuffer();
        sb.append(str);
        System.out.println(sb.reverse());
    }
}
```



#### **Java线程的状态**

创建 等待 超时等待 运行 阻塞 销毁（源码中就是六种）



#### **线程的生命周期**

创建 就绪 运行 阻塞 销毁



#### 线程池状态

```
线程池：running shutdown(不接收新任务，处理已添加的任务) stop(不接收新任务，不处理已添加的任务) tidying(所有的任务已终止) terminate
```



#### 线程池

```
* 七大参数：核心线程数 最大线程数 拒绝策略 队列 非核心线程存活时间 非核心线程存活时间单位 线程工厂
* 四种拒绝策略： 丢弃并直接抛出异常 丢弃不抛出异常 丢弃掉最队列最前面的任务然后重新提交被拒绝的任务 拒绝但是由提交任务的线程直接执行此任务
* 线程池原理实际就是将线程与任务解耦 线程创建出来之后会去执行循环任务(去查看是否有需要执行的任务,有就调run方法去执行,没有就继续循环去查看)

* 线程之间的通讯方式：
         * 1 根据volatile关键字 保证有序性和可见性
         * 2 Object的wait() 和 notify() notifyAll()方法
         * 3 Condition的await() 和 signal() signalAll()方法
```



#### RabbitMQ 消息中间件保证消息被消费

```
* 为防止消息丢失
* 生产者->MQ  可以采用confirm 即生产者发送消息到MQ MQ需要进行响应,生产者就知道MQ已经接收到信息才进行删除对应的消息
* MQ自身的持久化
* MQ->消费者 ack机制 同样消费者消费之后需要进行响应MQ MQ才知道消费者已经消费,才会进行删除
```



#### **spring mvc的五大组件**

DispatchServlet  HandlerMaping  Controller ViewResolve ModelAndView

```
springmvc执行流程:
springmvc过程 首先一个请求过来 dispatchservelet会先去根据path查到对应的handler（也就是对应的接口方法）然后调用控制器controller去调用service方法去进行处理请求,如果是json格式则直接返回浏览器 如果不是则将得到的modelAndView返回给前端控制器DispatchServelet  DispatchServelet 再将他传给ViewResolve进行解析，最后将解析结果返给View然后返给浏览器
```



#### **创建对象的几种方式**

1、直接new对象 。 2、利用反射获取class，调用newInstance()方法创建对象。  3、可以调用Constructor类的nnewInstance()方法来创建。4、反序列。



#### **spring ioc的几种注入方式**

1、setter注入  2、接口注入  3、构造器注入



#### **mybatis的隔离级别**

 读未提交 读已提交 可重复读 串行化  默认的级别是可重复读。

1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据

2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。

3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。

　　**小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表**



#### **Java有哪些容器**

主要分为二大类：Collection和Map。

list和set实现了Collection接口，hashmap实现的是Map接口。



#### **什么是泛型，有什么优点**

泛型就是参数化数据类型，将数据类型指定为一个参数。

好处：类型安全、避免了强制类型转换、性能也更好一点。



#### **get和post**

get请求会将请求参数放在url中，url的长度也是有限的。post是以请求体的形式去传递参数。

退回页面时，get直接退回，post需要重新提交请求。



#### **类加载的过程**

加载：将.calss文件加载到jvm。

链接：1、验证：验证字节流是否符合规范。 2、准备：分配内存空间，并赋初始值。3、解析：将符号引用变为直接引用、引用指向内存地址。

初始化：开始执行代码逻辑。



#### **pc计数器的作用**

保证程序的顺利执行，它记录的是下一条执行的指令。



#### **list的循环输出方式**

```java
public class Iterator {
    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);

        //for循环
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        System.out.println("------------------");

        //增强for循环
        for (Integer integer : list) {
            System.out.println(integer);
        }
        System.out.println("------------------");

        //迭代器
        java.util.Iterator<Integer> iterator = list.iterator();
        while(iterator.hasNext()){
            System.out.println(iterator.next());
        }
    }
}
```



#### **SQL语句 DML语句**

```sql
--DML语句
--表操作
CREATE TABLE B--创建表
(ID INT,
NAME VARCHAR(20));

DELETE B--删除表内容
ALTER TABLE B ADD email Varchar(20);--表添加一个字段

DELETE FROM B--删除表内容
DELETE B--删除表内容
TRUNCATE TABLE B --删除表内容 保留结构，与上面的区别是无法rollback 和hwm标记复位

ALTER TABLE B ADD email Varchar(20);--表添加一个字段
DROP TABLE B; --删除表
ALTER TABLE B DROP COLUMN email;--表删除一个字段
--数据操作
INSERT INTO B VALUES(1,'zhangsan');--添加一行数据
INSERT INTO B VALUES(2,'lisi');
INSERT INTO B VALUES(3,'pengyujie',1933799087)
DELETE --删除一行数据
FROM B
WHERE B.Id=1
UPDATE B SET email='1933799087@qq.com'--修改数据
WHERE B.ID=3
SELECT * FROM B ;--查询
--用户
GRANT USER user_name IDENTIFIED BY user_password--创建用户
GRANT CREATE TABLE TO user_name--授权给用户
-----
```



#### 分布式锁

> 能够实现多台机器中线程对共享资源的互斥访问

比如Redis的发布订阅、MySQL中多个线程连接同一个数据库，然后通过行锁实现互斥访问。都可以很好地实现分布式锁。

业内有三种实现方式：

1、基于数据库；

2、基于redis；

3、基于Zookeeper。



#### RPC

> 远程过程调用

可以使用httpclient（基于http的）去实现，也可以使用基于TCP/UDP协议的。



#### 防止死锁

1、设置加锁顺序，保证按顺序执行

2、设置加锁时长

3、进行死锁检查，保证确保第一时间发现死锁并进行解决



#### JSONObject.toJSONString()和toString()的区别 

前者相当于先toJSON然后toString。

~~~JAVA
List<Map> list =new ArrayList<>();
        Map<String,String> map = new HashMap<>();
        map.put("goods_id","1");
        map.put("goods_name","东山公寓3102-水电费充值");
        map.put("quantity","");
        map.put("price","");
        list.add(map);
        String str1 = list.toString();
        System.out.println("toString:"+str1);
        String str = JSONObject.toJSONString(list);
        System.out.println("toJSONString:"+str);
~~~



![1](\img\notes\problems\1.png)



#### Redis多路复用

![2](\img\notes\problems\2.png)



产生原因：因为redis为单线程数据库，当有I/O事件时，如果发生阻塞就无法为其他请求提供服务。这时候就需要用到多路复用

这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。多路复用实际就是监听每个I/O事件的状态，当系统通知这个I/O可读或者

可写之后才去执行，保证每次执行都是有用功，提高处理效率。一般用select，poll，epoll来做I/O事件监听的函数。





#### volatile

二个特性： 线程可见性、防止指令重排序

线程可见性：就是这个线程改变的值，在另一个线程获取不到（获取到的是未改变的值）

指令重排序：也就是防止代码内部逻辑顺序改变



可见性

~~~java
package com.example.demo.weixin;

import java.util.concurrent.TimeUnit;

public class VolatileTest01 {
    /*volatile*/ boolean flag = true;

    void running(){
        System.out.println("start!!!");
        while(flag){
        }
        System.out.println("end!!!");
    }

    public static void main(String[] args) {
        VolatileTest01 t = new VolatileTest01();
        new Thread(t::running,"running").start();

        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        t.flag=false;
    }
}
~~~

没有volatile 就无法获取到主线程改变的flag的值，那么线程就一直无法end！！！

加上volatile  一秒之后就会获取到flag改变后的值（可见性），线程就会end！！！。



重排序

~~~java
public class ResortSeqDemo {
    int a= 0;
    boolean flag = false;

    public void method01() {
        a = 1;
        flag = true;
    }

    public void method02() {
        if(flag) {
            a = a + 5;
            System.out.println("reValue:" + a);
        }
    }
}
~~~



~~~java
//正常顺序
a = 1;
flag = true;

a = a + 5;
System.out.println("reValue:" + a);


//重排序后可能导致顺序和我们预想的不一致
flag = true;

a = a + 5;
System.out.println("reValue:" + a);

a = 1;
~~~

这样顺序的不一样就导致结果就与实际不符合了。



#### throw和throws的区别

throws可以使多个异常，throw只能抛出一个异常

throws必须要进行抛出或捕获，否则会编译报错。throw抛出异常的方法，调用时可以不进行异常的抛出或捕获。

throws一般在方法头，throw在方法内。



#### 自旋锁

当去修改一个值时，需要先读取这个值是否为原来的值再去修改，如果发现已经被修改了就不能直接修改了，就需要再读一遍，然后再去修改。如果又被改变就继续上面操作循环。



#### JVM问题定位

[window定位](https://blog.csdn.net/qq_35939417/article/details/117262522)

~~~shell
jps   #查看系统中java进程号
jinfo 进程号	#打印信息
jstack 进程号	#查看进程所包含的线程 以及信息
~~~



#### 实体类中为什么要实现Serializable序列化接口

确切的说应该是对象的序列化，一般程序在运行时，产生对象，这些对象随着程序的停止运行而消失，但如果我们想把某些对象（因为是对象，所以有各自 不同的特性）保存下来，在程序终止运行后，这些对象仍然存在，可以在程序再次运行时读取这些对象的值，或者在其他程序中利用这些保存下来的对象。这种情况 下就要用到对象的序列化。

只有序列化的对象才可以存储在存储设备上。为了对象的序列化而需要继承的接口也只是一个象征性的接口而已，也就是说继承这个接口说明这个对象可以 被序列化了，没有其他的目的。**之所以需要对象序列化，是因为有时候对象需要在网络上传输，传输的时候需要这种序列化处理，从服务器硬盘上把序列化的对象取出，然后通过网络传到客户端，再由客户端把序列化的对象读入内存，执行相应的处理。**



#### CAP

就是一致性（Consistency）、可用性（Availability）和分区容错性（Partition）。CAP 理论告诉我们：**在一个分布式系统中，不可能同时满足一致性（Consistency)，可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足其中的2个**。

CA 一般在单体应用 ，CP是适合银行等对于一致性要求高的，AP是适合互联网项目，用户体验好。



#### tcp三次握手过程中可以携带数据吗？

其实第三次握手的时候，是可以携带数据的。但是，**第一次、第二次握手不可以携带数据**

为什么这样呢?大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。

也就是说，**第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。**

[tcp连接问题](https://juejin.cn/post/6844903958624878606)



#### Mybatis 传参方式：#{}和${}

我们经常使用的是#{},一般解说是因为这种方式可以防止SQL注入，简单的说#{}这种方式SQL语句是经过预编译的，它是把#{}中间的参数转义成字符串，举个例子：

传入'test' or 1=1

**${}**

select * from student where student_name = ${name} 

而使用${}在动态解析时候，会传入参数字符串，这时候会出现sql注入问题

select * from student where student_name =   'test' or 1=1  

**#{}**

select * from student where student_name = #{name} 

预编译后,会动态解析成一个参数标记符? 这样传入的参数就是只会作为一个简单的字符（其中的引号会作为转义字符，从而避免了参数也作为条件的一部分）

select * from student where student_name = '\\'test\\' or 1=1' 



#### 关于事务注解失效的问题

这里只写经常发生的情况（还有其他可能失效的没有写出）

-  Transactional注解标注方法修饰符为非public时
- 事务方法内部捕捉了异常，没有抛出新的异常
- 在类内部调用调用类内部@Transactional标注的方法

对于在类内部调用调用类内部@Transactional标注的方法，示例代码如下

~~~java
@Override
    public CommonResult createUser(UserDto userDto) {
        //类内部调用@Transactional标注的方法。
        insert(userDto);
        return CommonResult.builder().code(ResponseCode.SUCCESS.getCode()).message(ResponseCode.SUCCESS.getMessage()).build();
    }
    @Transactional
    public void insert(UserDto userDto) {
        User user = new User();
       BeanUtils.copyProperties(userDto,user);
        //正常public修饰符的事务方法
        userMapper.insert(user);
        int a = 1;
        if (a > 0) {
            throw new ApplicationException("-1", "新增失败", null);
        }
    }
~~~

注意：这里 是本类的createUser方法调用了本类的insert方法，使**本类的insert方法的事务注解没有生效**，如果此时在createUser上加上@Transactional注解，那么整个createUser方法也是有事务的。



举个简单的例子

~~~java
	@Override
    //@Transactional
    public void a() {
        SysUser sysUser = new SysUser();
        sysUser.setNickname("AAAA");
        sysUser.setAvatar("AAAA");
        this.sysUserMapper.insert(sysUser);
        b();
    }
    @Override
    @Transactional
    public void b(){
        SysUser sysUser = new SysUser();
        sysUser.setNickname("BBBB");
        sysUser.setAvatar("BBBB");
        this.sysUserMapper.insert(sysUser);
        String str = null;
        str.toString();//空指针

        SysUser sysUser1 = new SysUser();
        sysUser1.setNickname("CCCC");
        sysUser1.setAvatar("CCCC");
        this.sysUserMapper.insert(sysUser1);
    }
~~~

如果我们直接执行a()方法，数据库中就会**插入了A和B的数据，C并没有插入**(因为b方法的事务失效了)。

此时清空数据库，然后我们在a()方法加上事务注解，再调用a()方法，就会发现数据库中，**一条数据都没有插入**(因为a方法的事务生效了)



#### URL路径问题

访问遇到了一个之前的问题，之前解决但是忘了记录，想起来现在记录一下

首先先说一下设置图标的二种

- 全局设置为统一图标

在对应的根路径添加favicon.ico图标格式的文件。

- 对一个页面添加图标

在HTML中添加图片，不一定要ico格式文件。

~~~html
<link rel="icon" href="../images/favicon.ico" type="image/x-icon" />
~~~



问题：

当我们设置路径的时候，设置完成之后可以ctrl+点击  进入对应的资源的时候，我们以为是对的，但是我们启动项目结果资源404。

这时候可能是路径问题，比如当我设置favicon.ico的路径：为`../static/images/favicon.ico` 此时点击可以进去对应的资源。启动项目后图标没有出来图标资源404。

解决：如果我们将其改为`../images/favicon.ico` 点击并不能访问到对应的资源，但是启动后资源是可以获取到的。../ 是从根目录开始这里是从static目录开始。

**注意：对于favicon.ico来说，图片大小也不能过大，否则也是404，即使路径正确。**






#### [强缓存 和 协商缓存 原理](https://www.jianshu.com/p/9c95db596df5)



#### MySQL为什么选B+树而不是B树

B树非叶子结点也会存储数据，且父节点出现过的数据不会出现在子节点。

B+树是B树的变种，B+树只有叶子结点存储数据，叶子结点包含所有数据，且相邻叶子结点使用双向指针，适合MySQL中常见的基于范围的顺序查找，而只有叶子结点存储数据，那么非叶子结点就可以存储更多的索引。在相同的磁盘 I/O 次数下，就能查询更多的节点。



#### mysql保证树高度为3能存储的数据量

![1](../../../../img/notes/problems/mysql.jpg)



#### DML语句

```Java
--DML语句  

--表操作  

CREATE TABLE B--创建表  

(ID INT,  

NAME VARCHAR(20));  

DELETE B--删除表内容  

ALTER TABLE B ADD email Varchar(20);--表添加一个字段  

DELETE FROM B--删除表内容  

DELETE B--删除表内容  

TRUNCATE TABLE B --删除表内容 保留结构，与上面的区别是无法rollback 和hwm标记复位  

## ALTER TABLE B ADD email Varchar(20);--表添加一个字段  
DROP TABLE B; --删除表  
ALTER TABLE B DROP COLUMN email;--表删除一个字段  
--数据操作  
INSERT INTO B VALUES(1,'zhangsan');--添加一行数据  
INSERT INTO B VALUES(2,'lisi');  
INSERT INTO B VALUES(3,'pengyujie',1933799087)  
DELETE --删除一行数据  
FROM B  
WHERE B.Id=1  
UPDATE B SET email='1933799087@qq.com'--修改数据  
WHERE B.ID=3  
SELECT * FROM B ;--查询  
--用户  
GRANT USER user_name IDENTIFIED BY user_password--创建用户  
GRANT CREATE TABLE TO user_name--授权给用户
```



#### 增强for循环和迭代器

```Python
增强for循环底层也是使用了迭代器获取的，只不过获取迭代器由jvm完成，不需要我们获取迭代器而已，
所以在使用增强for循环变量元素的过程中不准使用集合对象对集合的元素个数进行修改。

迭代器遍历元素与增强for循环变量元素的区别：使用迭代器遍历集合的元素时可以删除集合的元素，
而增强for循环变量集合的元素时，不能调用迭代器的remove方法删除元素
```



#### SPI

全称 Service Provider Interface，一种服务发现机制。

![img](\img\notes\problems\image.png)

##### 缺点

- 不能按需加载。
- 虽然 ServiceLoader 做了延迟加载，但是只能通过遍历的方式全部获取。如果其中某些实现类很耗时，而且你也不需要加载它，那么就形成了资源浪费获取某个实现类的方式不够灵活，只能通过迭代器的形式获取

##### 使用

如某接口有3个实现类，那系统运行时，该接口到底选择哪个实现类呢？这时就需要SPI，**根据指定或默认配置，找到对应实现类，加载进来，然后使用该实现类实例**。



#### 保证微服务接口的幂等

全局唯一ID、去重表、版本控制等



#### 分布式锁解决方案

基于数据库实现分布式锁； 基于缓存（Redis等）实现分布式锁； 基于Zookeeper实现分布式锁；

```Java
redis实现分布式锁 setnx 成功写入key返回1 失败0

setnx命令和set命令的区别

setnx是key存在，不会被覆盖，返回0 set如果key存在，覆盖value值

zookeeper实现分布式锁 多个客户端，同时在zk上创建临时节点，临时节点路径保证唯一

Redis实现分布式锁与Zookeeper实现分布式锁区别

从技术上分析（区别）

Redis 是nosql数据，主要特点缓存

Zookeeper是分布式协调工具，主要用于分布式解决方案

实现思路（ 区别）

核心通过获取锁、释放锁、死锁问题

获取锁

Zookeeper

多个客户端（jvm），会在Zookeeper上创建同一个临时节点，因为Zookeeper节点命名路径保证唯一，不允许出现重复，只要谁能够先创建成功，谁能够获取到锁。

Redis

多个客户端（jvm），会在Redis使用setnx命令创建相同的一个key，因为Redis的key保证唯一，不允许出现重复，只要谁能够先创建成功，谁能够获取到锁。

释放锁

Zookeeper使用直接关闭临时节点session会话连接，因为临时节点生命周期与session会话绑定在一块，如果session会话连接关闭的话，该临时节点也会被删除。这时候客户端使用事件监听，如果该临时节点被删除的话，重新进入盗获取锁的步骤。

Redis在释放锁的时候，为了确保是锁的一致性问题，在删除的redis 的key时候，需要判断同一个锁的id，才可以删除。

共同特征：如何解决死锁现象问题

Zookeeper使用会话有效期方式解决死锁现象。

Redis 是对key设置有效期解决死锁现象

性能角度考虑: 因为Redis是NoSQL数据库，相对比来说Redis比Zookeeper性能要好。

从可靠性角度分析: Zookeeper可靠性比Redis更好。

因为Redis有效期不是很好控制，可能会产生有效期延迟，Zookeeper就不一样，因为Zookeeper临时节点先天性可控的有效期，所以相对来说Zookeeper比Redis更好、
```

#### 重量级锁和轻量级锁

重量级锁：会调用操作系统函数（本地方法）

轻量级锁：在jvm层面就解决了，不需要调用本地方法（效率也相对要高很多）。





#### SpringBean的生命周期

总的来说分为 `实例化-属性设置-初始化— 使用 —销毁`

##### 1 首先项目启动

##### 2 加载对应的BeanDefinition对象

##### 3 根据BeanDefinition对象去创建Bean对象

- 构造对象

- 填充属性

- 初始化实例

- 注册销毁

##### 4 添加到单例池

##### 5 最后销毁



#### bean的作用域

单例作用域(唯一bean实例，由Spring容器管理其生命周期)

原型作用域(原型bean，创建后容器不管理其生命周期)

request作用域(每次http都产生新的bean，仅在http request内有效)

session作用域(首次http请求创建一个实例，作用域是浏览器首次访问直至浏览器关闭)

全局作用域（在⼀个http servlet Context中，定义⼀个Bean实例）



#### redis和MongoDB的区别

二者都是nosql

redis支持多种数据类型包括hash，string，set，sortset，list等等，MongoDB只有一种文档类型，可以直接支持json格式存储，更为方便大量数据的存储。

对事物的支持，redis支持简单的事务，而MongoDB不支持

简单来说 redis适合数据的快速访问，MongoDB适合海量数据的查询和分析



#### hashmap和hashtable

hashmap是基于数组+链表+红黑树，hashtable是基于数据+链表的

前者是非线程安全，后者线程安全；前者允许null作为键值，后者不允许

hashtable方法都使用了synchronized修饰



#### jvm模型图 jdk1.8

![img](\img\notes\problems\jvm1.8.png)





#### b树和b+树

b+树在b数基础上叶子结点增加了双向链表，可以快速进行范围查询
且b+树叶子结点包含了所有结点，而b数叶子结点是不含父节点的
b+树的结构更满足数据库的要求。



#### 四大元注解

##### @Target

说明了Annotation所修饰的对象范围
1.CONSTRUCTOR:用于描述构造器 2.FIELD:用于描述域 3.LOCAL_VARIABLE:用于描述局部变量 4.METHOD:用于描述方法 5.PACKAGE:用于描述包 6.PARAMETER:用于描述参数 7.TYPE:用于描述类、接口(包括注解类型) 或enum声明

##### @Retention

定义了该Annotation被保留的时间长短
1.SOURCE:在源文件中有效（即源文件保留）
2.CLASS:在class文件中有效（即class保留）
3.RUNTIME:在运行时有效（即运行时保留）

##### @Documented

用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。

##### @Inherited

@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。



### 名称解释

##### 限流：限制并发的请求访问量，超过阈值则拒绝；

##### 降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；

##### 熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复





### 限流处理

#### 容器限流

可以通过相关配置进行限流
tomcat限制并发线程、Nginx可以限制请求速率和并发数量

#### 算法限流

时间窗口：滑动时间算法指的是以当前时间为截止时间，往前取一定的时间，比如往前取 60s 的时间，在这 60s 之内运行最大的访问数为 100，此时算法的执行逻辑为，先清除 60s 之前的所有请求记录，再计算当前集合内请求数量是否大于设定的最大请求数 100，如果大于则执行限流拒绝策略，否则插入本次请求记录并返回可以正常执行的标识给客户端。窗口时间越精细越好，但是不好控制。缺陷：60s分为了10个窗口，每个窗口6s，那么如果窗口的第1s就进来了10个请求，后面5s就不会放请求进来了。

漏桶：漏桶算法的实现步骤是，先声明一个队列用来保存请求，这个队列相当于漏斗，当队列容量满了之后就放弃新来的请求，然后重新声明一个线程定期从任务队列中获取一个或多个任务进行执行，这样就实现了漏桶算法，可以使用 Redis 4.0 版本中提供的 Redis-Cell 模块，该模块使用的是漏斗算法，并且提供了原子的限流指令，而且依靠 Redis 这个天生的分布式程序就可以实现比较完美的限流了

令牌桶：在令牌桶算法中有一个程序以某种恒定的速度生成令牌，并存入令牌桶中，而每个请求需要先获取令牌才能执行，如果没有获取到令牌的请求可以选择等待或者放弃执行。可以使用 Google 开源的 guava 包，很方便的实现令牌桶算法。

**优先选择 漏桶或令牌桶算法**





### redolog、undolog、binlog



`redolog` 重做日志保证事务的**持久性**，`MySQL` 实例挂了或宕机了，重启时，`InnoDB`存储引擎会使用`redo log`恢复数据，保证数据的持久性与完整性。`binlog` 逻辑日志保证数据一致性，只要发生了表数据更新，都会产生 `binlog` 日志。`MySQL`数据库的**数据备份、主备、主主、主从**都离不开`binlog`，需要依靠`binlog`来同步数据，保证数据一致性。
`undolog` 回滚日志保证事务的**原子性**，它可以保存事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制（[MVCC](https://so.csdn.net/so/search?q=MVCC&spm=1001.2101.3001.7020)）下的读。



具体更新一条记录 UPDATE t_user SET name = 'xiaolin' WHERE id = 1; 的流程如下:

1. 执行器负责具体执行，会调用存储引擎的接口，通过主键索引树搜索获取 id = 1 这一行记录：

- 如果 id=1 这一行所在的数据页本来就在 buffer pool 中，就直接返回给执行器更新；

- 如果记录不在 buffer pool，将数据页从磁盘读入到 buffer pool，返回记录给执行器。

1. 执行器得到聚簇索引记录后，会看一下更新前的记录和更新后的记录是否一样：

- 如果一样的话就不进行后续更新流程；

- 如果不一样的话就把更新前的记录和更新后的记录都当作参数传给 InnoDB 层，让 InnoDB 真正的执行更新记录的操作；

1. 开启事务， InnoDB 层更新记录前，首先要记录相应的 undo log，因为这是更新操作，需要把被更新的列的旧值记下来，也就是要生成一条 undo log，undo log 会写入 Buffer Pool 中的 Undo 页面，不过在内存修改该 Undo 页面后，需要记录对应的 redo log。

1. InnoDB 层开始更新记录，会先更新内存（同时标记为脏页），然后将记录写到 redo log 里面，这个时候更新就算完成了。为了减少磁盘I/O，不会立即将脏页写入磁盘，后续由后台线程选择一个合适的时机将脏页写入到磁盘。这就是 **WAL 技术**，MySQL 的写操作并不是立刻写到磁盘上，而是先写 redo 日志，然后在合适的时间再将修改的行数据写到磁盘上。

1. 至此，一条记录更新完了。

1. 在一条更新语句执行完成后，然后开始记录该语句对应的 binlog，此时记录的 binlog 会被保存到 binlog cache，并没有刷新到硬盘上的 binlog 文件，在事务提交时才会统一将该事务运行过程中的所有 binlog 刷新到硬盘。

1. 事务提交（为了方便说明，这里不说组提交的过程，只说两阶段提交）：

- **prepare 阶段**：将 redo log 对应的事务状态设置为 prepare，然后将 redo log 刷新到硬盘；

- **commit 阶段**：将 binlog 刷新到磁盘，接着调用引擎的提交事务接口，将 redo log 状态设置为 commit（将事务设置为 commit 状态后，刷入到磁盘 redo log 文件）；

至此，一条更新语句执行完成。

























### 工具网站

 [程序员521网站](http://www.cxy521.com/)

 [查看域名ssl检测 亚洲诚信](https://myssl.com/)



