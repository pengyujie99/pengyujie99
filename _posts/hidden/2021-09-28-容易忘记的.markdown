---
layout:     post
title:      ""
subtitle:   "需要记忆的知识"
date:       2021-09-28
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
hidden: true
tags:
  - Java
  - 
  - IDEA
---

> 



#### 关于`子类` `父类`之间转换

~~~java
package com.example.demo.test;


import lombok.extern.slf4j.Slf4j;

import java.util.*;
@Slf4j
public class Test {
    public static void main(String[] args) {

        log.info("子类转父类");
        Person person = new Body();//
        person.eat();//由于还是父类可以调用父类方法 如果该方法被重写了就是重写后的方法 所以实际调用的还是Body的方法
        person.personRead();//由于还是父类 调用父类方法(只可以调用父类中存在的方法，如果方法被子类重写了 就是调用子类方法)
        person.personWrite();

        log.info("父类转子类（强转）");
        Body body = (Body) person;//强转
        body.eat();//子类 可以调用父类方法(非私有) 可以调用子类方法
        body.read();
        body.write();
        body.personWrite();
        body.personRead();

        log.info("父类");
        Person person1 = new Person();
        person1.eat();

        log.info("子类");
        Body body1 = new Body();//与父类转子类（强转） 相同
        body1.eat();
        body1.read();
        body1.write();
        body1.personWrite();
        body1.personRead();

    }

}

class Person{
    public void eat(){
        System.out.println("person");
    }
    public void personWrite(){
        System.out.println("person-write");
    }
    public void personRead(){
        System.out.println("person-read");
    }
}


class Body extends Person{
    public void eat() {
        System.out.println("body");;
    }
    public void write(){
        System.out.println("body-write");
    }
    public void read(){
        System.out.println("body-read");
    }
}

~~~

运行结果：

~~~
11:46:39.160 [main] INFO com.example.demo.test.Test - 子类转父类
body
person-read
person-write
11:46:39.163 [main] INFO com.example.demo.test.Test - 父类转子类（强转）
body
body-read
body-write
person-write
person-read
11:46:39.163 [main] INFO com.example.demo.test.Test - 父类
person
11:46:39.163 [main] INFO com.example.demo.test.Test - 子类
body
body-read
body-write
person-write
person-read
~~~







































