---
layout:     post
title:      "Mall"
subtitle:   "电商项目笔记"
date:       2021-08-05
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
hidden: true
tags:
  - Java
  - SpringBoot

---

> 电商项目的部分笔记



#### 处理父子依赖

首先在父依赖，将需要进行`<packaging>pom</packaging>`

然后将需要管理的依赖放入`<dependencyManagement> 需要管理的依赖 </dependencyManagement>`

父依赖

~~~xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <!--    依赖名称-->
    <groupId>com.example</groupId>
    <artifactId>mall-parent</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>mall-parent</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <!--    管理依赖-->
    <packaging>pom</packaging>
    <dependencyManagement>
    <dependencies>
        <!-- Dubbo Registry Nacos -->
        <dependency>
            <groupId>com.alibaba.nacos</groupId>
            <artifactId>nacos-client</artifactId>
            <version>1.4.0</version>
        </dependency>
    </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>

~~~



子依赖只需要在前面表示哪个父依赖，下面导入时就不需要输入版本号了

子依赖

~~~xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--    父依赖是谁？-->
    <parent>
        <groupId>com.example</groupId>
        <artifactId>mall-parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>mall-buyer-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>mall-buyer-api</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <!-- Dubbo Registry Nacos -->
        <dependency>
            <groupId>com.alibaba.nacos</groupId>
            <artifactId>nacos-client</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>

~~~



#### 跨域配置



~~~java
package com.mszlu.shop.buyer.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebMVCConfig implements WebMvcConfigurer {

    @Value("${buyer.url}")
    private String buyerUrl;
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**").allowedOrigins(buyerUrl);
    }
}
~~~







sharding-jdbc也是一款分库分表的“中间件”，不过，它并不向Mycat那样作为一个真正的中间件，它是一款以jar包的形式整合到业务中的插件，这就决定了它是轻量级的，用法也是十分简单的。



#### mybatis-plus的使用

创建项目，创建mapper文件夹，

编写一个pojo类

~~~java
package com.peng.shop.buyer.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class User {
    private Integer id;

    private String name;
}
~~~



创建mapper接口继承BaseMapper类

~~~java
package com.peng.shop.buyer.mapper;

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.peng.shop.buyer.pojo.User;

public interface TestMapper extends BaseMapper<User> {
    //mybatisplus 默认有简单的crud
    //复杂的crud方法可以在这写
}
~~~

编写一个config （分页）

~~~java
package com.peng.shop.buyer.dubbo.config;

import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@MapperScan("com.peng.shop.buyer.mapper")
public class MybatisPlusConfig {

    @Bean
    public MybatisPlusInterceptor mybatisPlusInterceptor(){
        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();
        //分页插件 mybatisplus可以帮我们自动分页
        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());
        return mybatisPlusInterceptor;
    }
}
~~~

之后便可以将mapper，注入impl中，调用mapper对应的方法，进行数据库数据操作了。



#### 防止多次查询数据库

查询一群有层级的商品信息，如果频繁调用数据库查询，就容易导致缓存穿透，性能低，可以使用一次查询出所有商品，然后给每一个商品的children传入对应得子商品信息。

~~~java

    /*
    * 1 根据parentId查询出所有Category
    * 2 根据如果查询出来的Category的parentId=0 表示为第一层 放入categoryVoList
    * 3 然后再调用方法 去遍历所有的Category 如果Category的parentId 为第一层的id 就是表示这个Category是第一层的children
    * 4 然后递归
    * */
    public List<CategoryVO> categoryTree(Long parentId){
        LambdaQueryWrapper<Category> queryWrapper =new LambdaQueryWrapper<>();
        queryWrapper.eq(Category::getStatus,0);
        List<Category> categories = categoryMapper.selectList(queryWrapper);//所有的category 只调用了一次查询数据库
        List<CategoryVO> categoryVOS = copyList(categories);
        List<CategoryVO> categoryVOList =new ArrayList<>();
        for (CategoryVO categoryVO : categoryVOS) {
            if (categoryVO.getParentId().equals(parentId)) {
                //为parentId的层级
                categoryVOList.add(categoryVO);
                addAllChildren(categoryVO,categoryVOS);

            }
        }
        return categoryVOList;//返回的只有第parentId层的信息
    }

    private void addAllChildren(CategoryVO categoryVO, List<CategoryVO> categoryVOS) {
        List<CategoryVO> categoryVOList =new ArrayList<>();
        for (CategoryVO vo : categoryVOS) {
            if (vo.getParentId()==categoryVO.getId()) {//vo为categoryVo的下一层
                categoryVOList.add(vo);//将这个categoryVo的下一层存入一个list
                addAllChildren(vo,categoryVOS);//递归
            }
        }
        categoryVO.setChildren(categoryVOList);//将这个list存入 categoryVO的Children
    }


    @Override
    public List<CategoryVO> findCategoryTree(Long parentId) {
        /**
         * 1. 根据parentId 获取对应的分类列表
         * 2. 获取到的分类列表 只有一级
         * 3. 根据刚才的sql执行 发现了问题： 循环 递归的获取 所有分类的 子分类列表
         * 4. 如果这么做的话，数据库连接就会多次 连接 性能就会降低
         * 5. 不能这么写，想了一个方法 把所有的分类查出来，一次查询 效率高
         * 6. 代码去组合 层级关系，代码的允许速度是非常快的，因为代码运行在内存当中
         */
        return categoryTree(parentId);
    }
~~~





未完待续





































