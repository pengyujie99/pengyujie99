---
layout:     post
title:      "回顾"
subtitle:   "对网络编程等基础的回顾"
date:       2021-07-18 12:00:00
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
hidden: true
tags:
    - Java
    - net
    - Socket
    - 反射
    - 集合
    - 正则

---

>对网络编程等的回顾。



## 回顾

### 网络编程

> 网络编程的本质就是实现不同地理位置，多台计算机之间的资源共享和信息传递



> 利用socket 进行通信，socket.getOutputStream()、socket.getInputStream()



#### TCP实现简单的聊天

先运行服务端，在运行客户端

服务端

~~~java
package com.example.demo.kuangstudy.tcp;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class TcpServerDemo01 {
    public static void main(String[] args) {
        ServerSocket serverSocket =null;
        Socket socket=null;
        InputStream is =null;
        ByteArrayOutputStream baos =null;


        while(true){
            try {
                //1 创建一个服务器地址
                serverSocket = new ServerSocket(8888);
                //2 等待客户端连接过来
                socket = serverSocket.accept();
                //3 读取客户端传过来的消息
                is = socket.getInputStream();
                //管道流
                baos =new ByteArrayOutputStream();

                byte[] buffer =new byte[1024];
                int len;
                while((len=is.read(buffer))!=-1){
                    baos.write(buffer,0,len);
                }
                System.out.println(baos.toString());
            }catch (IOException e){
                e.printStackTrace();
            }finally {
                if(baos!=null){
                    try {
                        baos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if(is!=null){
                    try {
                        is.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if(socket!=null){
                    try {
                        socket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if(serverSocket!=null){
                    try {
                        serverSocket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

        }
    }
}
~~~



客户端

~~~java
package com.example.demo.kuangstudy.tcp;


import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Scanner;


public class TcpClientDemo01 {
    public static void main(String[] args) {

        Socket socket = null;
        OutputStream os = null;
        try{
            //1 首先要知道连接地址和端口
            InetAddress ServerIP = InetAddress.getByName("127.0.0.1");
            int port = 8888;
            //2 创建一个socket连接
            socket =new Socket(ServerIP,port);
            //3 发送消息 IO流
            Scanner sc =new Scanner(System.in);//输入你想说的话 会在服务端显示
            String str = sc.nextLine();

            os = socket.getOutputStream();
            os.write(str.getBytes());//把你说的话换为byte，进行写入os中
        }catch (IOException e){
            e.printStackTrace();
        }finally {
            if(os!=null){
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(socket!=null){
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

    }
}
~~~





#### TCP实现文件上传



客户端上传文件

~~~java
package com.example.demo.kuangstudy.tcp;

import java.io.*;
import java.net.InetAddress;
import java.net.Socket;

public class WangYiYun {
    public static void main(String[] args) throws Exception {
        //地址
        InetAddress IP = InetAddress.getByName("127.0.0.1");
        //创建一个socket连接
        Socket socket =new Socket(IP,9000);
        //创建一个输出流
        OutputStream os = socket.getOutputStream();
        //文件流
        FileInputStream fis = new FileInputStream(new File("WangYiYun.jpg"));

        //写出文件
        byte[] buffer =new byte[1024];
        int len;
        while((len=fis.read(buffer))!=-1){
            os.write(buffer,0,len);
        }
        //通知服务器，传输完毕可以接收了
        socket.shutdownOutput();//已经传输完毕

        //接收服务器传来的消息，确认接收完毕之后断开
        InputStream inputStream = socket.getInputStream();
        byte[] buffer1 =new byte[1024];
        int len1;
        ByteArrayOutputStream baos =new ByteArrayOutputStream();
        while((len1=inputStream.read(buffer))!=-1){
            baos.write(buffer1,0,len1);
            System.out.println(baos);
        }

        //关闭资源
        fis.close();
        os.close();
        socket.close();
    }
}
~~~





服务端接收文件

~~~java
package com.example.demo.kuangstudy.tcp;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class WangYiYunServer {
    public static void main(String[] args) throws Exception {
        //创建服务端
        ServerSocket serverSocket = new ServerSocket(9000);
        //监听客户端的连接 如果没有接收到socket连接会一直阻塞 直到接收到连接
        Socket socket = serverSocket.accept();

        //获取输入流
        InputStream is = socket.getInputStream();
        //文件输出
        FileOutputStream fos = new FileOutputStream(new File("tcpDown.jpg"));

        byte[] buffer =new byte[1024];
        int len;
        while((len=is.read(buffer))!=-1){
            fos.write(buffer,0,len);
        }

        //通知客户端我接收完毕
        OutputStream outputStream = socket.getOutputStream();
        outputStream.write("接收完毕！可以关闭了".getBytes());

        //关闭资源
        fos.close();
        is.close();
        socket.close();
        serverSocket.close();
    }
}
~~~



#### UDP实现消息发送



服务端

~~~java
package com.example.demo.kuangstudy.udp;

import java.net.DatagramPacket;
import java.net.DatagramSocket;

public class UdpServerDemo01 {
    public static void main(String[] args) throws Exception {
        //1 开放端口，保证可以传输过来
        DatagramSocket socket = new DatagramSocket(9090);

        //接收数据包
        byte[] buffer = new byte[1024];
        DatagramPacket packet = new DatagramPacket(buffer,0,buffer.length);//数据 数据长度的开始 数据长度的结束

        socket.receive(packet);


        System.out.println(new String(packet.getData(),0,packet.getData().length));//byte转为String  数据 数据长度的开始 数据长度的结束
        System.out.println("收到的信息来自于："+packet.getSocketAddress());//信息来源计算机的IP和端口号

        //关闭
        socket.close();

    }
}
~~~



客户端

~~~java
package com.example.demo.kuangstudy.udp;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Scanner;

public class UdpClientDemo01 {//udp无连接实现消息发送
    public static void main(String[] args) throws Exception {
        //发送地址
        InetAddress IP = InetAddress.getByName("127.0.0.1");
        int port = 9090;
        //1 建立一个socket
        DatagramSocket socket = new DatagramSocket();

        //2 建个包
        Scanner sc =new Scanner(System.in);
        String str =sc.nextLine();

        //数据 数据长度的开始 数据长度的结束 IP地址 端口号
        DatagramPacket packet = new DatagramPacket(str.getBytes(), 0, str.getBytes().length, IP, port);

        //3 发送包
        socket.send(packet);

        //4 关闭socket
        socket.close();

    }
}
~~~



#### UDP实现简单的聊天

这里只使用了一个发送端（客户端） 和接收端（客户端）。要实现多人可以利用线程实现。

客户端

~~~java
package com.example.demo.kuangstudy.udp.chat;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;

public class UdpSend01 {
    public static void main(String[] args) throws Exception {
        //开放端口 让数据可以传过来
        DatagramSocket socket = new DatagramSocket(8888);

        //准备数据
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        while(true){
            String data =reader.readLine();
            byte[] datas = data.getBytes();

            DatagramPacket packet = new DatagramPacket(datas,0,datas.length,new InetSocketAddress("localhost",8889));

            socket.send(packet);
            if("bye".equals(data)){
                break;
            }
        }
        reader.close();
        socket.close();
    }
}
~~~



服务端

~~~java
package com.example.demo.kuangstudy.udp.chat;

import java.net.DatagramPacket;
import java.net.DatagramSocket;

public class UdpReceive01 {
    public static void main(String[] args) throws Exception {
        //开放端口 让数据可以传过来
        DatagramSocket socket = new DatagramSocket(8889);
        System.out.println("=======聊天室========");

        while(true){
            //准备接收数据包
            byte[] buffer = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buffer,0,buffer.length);

            //阻塞接收
            socket.receive(packet);

            //读取数据
            String rec_str = new String(packet.getData(), 0, packet.getData().length);
            //接收数据为bye时断开连接 不能直接使用"bye".equals(rec_str)  rec_str长度与bye不一致 因为byte数组默认为1024
            if("bye".equals(rec_str.trim())){//trim() 方法用于删除字符串的头尾空白符
                System.out.println(packet.getAddress()+":");
                System.out.println(rec_str);
                break;
            }else{
                System.out.println(packet.getAddress()+":");
                System.out.println(rec_str);
            }
        }
        socket.close();
        System.out.println("聊天室已关闭");
    }
}
~~~



#### UDP实现聊天



接收端线程

~~~java
package com.example.demo.kuangstudy.udp.chat01;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

public class UdpReceive implements Runnable{//接收端线程
    DatagramSocket socket =null;

    private int fromPort;//本线程端口

    public UdpReceive(int fromPort) {
        this.fromPort = fromPort;

        try {
            System.out.println("=======聊天室========");
            socket =new DatagramSocket(fromPort);
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        while(true){
            //准备接收数据包
            byte[] buffer = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buffer,0,buffer.length);

            //阻塞接收
            try {
                socket.receive(packet);
            } catch (IOException e) {
                e.printStackTrace();
            }

            //读取数据
            String rec_str = new String(packet.getData(), 0, packet.getData().length);
            //接收数据为bye时断开连接 不能直接使用"bye".equals(rec_str)  rec_str长度与bye不一致 因为byte数组默认为1024
            if("bye".equals(rec_str.trim())){//trim() 方法用于删除字符串的头尾空白符
                System.out.println(packet.getSocketAddress()+":");
                System.out.println(rec_str);
                break;
            }else{
                System.out.println(packet.getSocketAddress()+":");
                System.out.println(rec_str);
            }
        }
        socket.close();
        System.out.println("聊天室已关闭");

    }
}
~~~



发送端线程

~~~~java
package com.example.demo.kuangstudy.udp.chat01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketException;

public class UdpSend implements Runnable{//发送端线程
    DatagramSocket socket =null;
    BufferedReader reader = null;

    private String IP;//发送给对方 对方的IP地址
    private int port;//发送给对方 对方的port端口号
    private int fromPort;//本线程端口

    public UdpSend(String IP, int port, int fromPort) {
        this.IP = IP;
        this.port = port;
        this.fromPort = fromPort;

        //开放端口 让数据可以传过来
        try {
            socket = new DatagramSocket(fromPort);//开放端口 可以接收数据 传出数据时会存入packet里
            reader = new BufferedReader(new InputStreamReader(System.in));//准备数据

        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            while(true){
                String data =reader.readLine();
                byte[] datas = data.getBytes();

                DatagramPacket packet = new DatagramPacket(datas,0,datas.length,new InetSocketAddress(IP,port));

                socket.send(packet);
                if("bye".equals(data)){
                    break;
                }
            }
            reader.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
~~~~



要聊天开启二个线程就可以进行聊天了

聊天学生1     

~~~java
package com.example.demo.kuangstudy.udp.chat01;

public class Student01 {//每个学生都开启 发送和接收线程 就都可以进行接收和发送消息了
    public static void main(String[] args) {
        new Thread(new UdpSend("localhost",9999,5555)).start();//该学生的发送端口5555 发给对方的对方9999端口
        new Thread(new UdpReceive(8888)).start();//该学生的接收端口
    }
}
~~~



聊天学生2

~~~java
package com.example.demo.kuangstudy.udp.chat01;

public class Student02 {
    public static void main(String[] args) {
        new Thread(new UdpSend("localhost",8888,6666)).start();//该学生的发送端口6666 发给对方的对方8888端口
        new Thread(new UdpReceive(9999)).start();//该学生的接收端口
    }
}
~~~







#### URL下载网络资源

网络上一切都是流

~~~java
package com.example.demo.kuangstudy;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;

public class WangYiYun {
    public static void main(String[] args) throws IOException {
        //下载地址
        URL url =new URL("https://images2017.cnblogs.com/blog/1222878/201711/1222878-20171111160819825-27801316.png");//url地址
        System.out.println(url.getProtocol());//协议
        System.out.println(url.getHost());//主机IP
        System.out.println(url.getPort());//端口
        System.out.println(url.getFile());//文件
        System.out.println(url.getPath());//全路径
        System.out.println(url.getQuery());//参数
        //连接到这个资源
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        FileOutputStream fos =new FileOutputStream("WangYiYun.jpg");
        byte[] buffer= new byte[1024];
        int len;
        while((len=inputStream.read(buffer))!=-1){
            fos.write(buffer,0,len);//写出这个数据
        }
        fos.close();
        inputStream.close();
        System.out.println("success");
    }
}
~~~





### JUC

#### CAS compare and swap

~~~java
public class CAS {
    public static void main(String[] args) {
        AtomicInteger atomicInteger = new AtomicInteger(100);// 设置原来值var1

        System.out.println(atomicInteger.compareAndSet(100, 20));//设置期望值 和 替换值
        System.out.println(atomicInteger.get());

        System.out.println(atomicInteger.getAndIncrement());
    }
}
~~~



源码里 Unsafe类去调用底层c++方法去操作内存





如果出现ABA问题，可以通过版本号或者时间戳解决。

~~~java
package com.example.demo.kuangstudy;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicStampedReference;

public class CAS {
    public static void main(String[] args) {
        AtomicStampedReference<Object> atomicStampedReference = new AtomicStampedReference<>(100,1);//利用时间戳解决 ABA问题

        //线程a
        new Thread(()->{
            try {
                TimeUnit.SECONDS.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            //如果修改版本号+1
            System.out.println(atomicStampedReference.compareAndSet(100, 20,
                    atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + 1));//获取最新的版本号+1 在返回true
            System.out.println("a1--"+atomicStampedReference.getStamp());


            System.out.println(atomicStampedReference.compareAndSet(20, 100,
                    atomicStampedReference.getStamp(), atomicStampedReference.getStamp() + 1));//获取最新的版本号+1 在返回true
            System.out.println("a2--"+atomicStampedReference.getStamp());

        },"a").start();


        //线程b
        new Thread(()->{
            int stamp = atomicStampedReference.getStamp();//每个线程获取自己最开始的版本号，修改时，版本号必须与获取的相同
            try {
                TimeUnit.SECONDS.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            //如果修改版本号+1
            System.out.println(atomicStampedReference.compareAndSet(100, 9999,
                    stamp, atomicStampedReference.getStamp() + 1));//预期版本号获取的是最开始的版本号  现在实际版本号已经是3了 应返回false
            //返回版本号和值
            System.out.println("b--"+atomicStampedReference.getStamp());


        },"b").start();
    }
}
~~~



#### 生产者消费者问题 线程通信

静态方法锁的是Class属性，非静态方法锁的是这个对象。

线程类：flag是为了保证线程按照 acbd的顺序执行 保证一个线程执行 其他都是wait状态。

~~~java
package com.example.demo.kuangstudy;

public class Synchronized {
    private  int num =0;
    private int flag =1;
    public synchronized  void a_de() throws InterruptedException {
            while(num!= 0 || flag!=1){
                this.wait();
            }
            num--;
            flag=2;
            this.notifyAll();
            System.out.println("a_de: "+num);
    }
    public synchronized  void b_de() throws InterruptedException {
        while(num!= 0|| flag!=3){
            this.wait();
        }
            num--;
            flag=4;
            this.notifyAll();
            System.out.println("b_de: "+num);
    }
    public synchronized  void c_in() throws InterruptedException {
        while(num!= -1||flag!=2){
            this.wait();
        }
            num++;
            flag=3;
            this.notifyAll();
            System.out.println("c_in: "+num);

    }
    public synchronized  void d_in() throws InterruptedException {
        while(num!= -1|| flag!=4){
            this.wait();
        }
            num++;
            flag=1;
            this.notifyAll();
            System.out.println("d_in: "+num);
    }
}
~~~

主类：

~~~java
package com.example.demo.kuangstudy;

public class SynA {
    public static void main(String[] args) {
        Synchronized syn = new Synchronized();
        new Thread(()->{
            for (int i = 0; i < 10; i++) {
                try {
                    syn.a_de();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        },"A").start();

        new Thread(()->{
            for (int i = 0; i < 10; i++) {
                try {
                    syn.b_de();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        },"B").start();

        new Thread(()->{
            for (int i = 0; i < 10; i++) {
                try {
                    syn.c_in();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        },"C").start();

        new Thread(()->{
            for (int i = 0; i < 10; i++) {
                try {
                    syn.d_in();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        },"D").start();

    }
}
~~~



Lock锁实现

~~~java
package com.example.demo.kuangstudy.juc;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class LockCondition {
    private  int num =0;
    private int flag =1;
    Lock lock =new ReentrantLock();
    Condition condition1 =lock.newCondition();
    Condition condition2 =lock.newCondition();
    Condition condition3 =lock.newCondition();
    Condition condition4 =lock.newCondition();


    public   void a_de() throws InterruptedException {
        lock.lock();
        try {
            while(num!= 0 || flag!=1){
                condition1.await();
            }
            num--;
            flag=2;
            condition3.signal();
            System.out.println("a_de: "+num);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
    public   void b_de() throws InterruptedException {
        lock.lock();
        try {
            while(num!= 0 || flag!=3){
                condition2.await();
            }
            num--;
            flag=4;
            condition4.signal();
            System.out.println("b_de: "+num);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
    public   void c_in() throws InterruptedException {
        lock.lock();
        try {
            while(num!= -1 || flag!=2){
                condition3.await();
            }
            num++;
            flag=3;
            condition2.signal();
            System.out.println("c_in: "+num);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }

    }
    public   void d_in() throws InterruptedException {
        lock.lock();
        try {
            while(num!= -1 || flag!=4){
                condition4.await();
            }
            num++;
            flag=1;
            condition1.signal();
            System.out.println("d_in: "+num);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
}
~~~



#### 死锁

>死锁必须要有至少二个线程才会发生 ，也就是需要双方都需要获取对方资源才能进行下一步，双方互不相让，形成了僵持。这就叫死锁

代码举例：

~~~java
package com.example.demo.kuangstudy.hsp.deadLock;

public class DeadLock extends Thread{

    boolean isFlag;
    static Object o1 =new Object();//需要使用static保证多线程共享一个对象  不使用的话 每new一个DeadLock对象就会创建一个o1
    static Object o2 =new Object();

    public DeadLock(boolean Flag){
        this.isFlag = Flag;
    }

    @Override
    public void run() {
        if (isFlag){
            synchronized (o1){//代码块锁
                System.out.println(Thread.currentThread().getName()+"已经获取了o1锁---尝试去获取o2锁");
                synchronized(o2){
                    System.out.println("已经获取了o2锁---"+Thread.currentThread().getName()+"执行完毕！！！");
                }
            }
        }else {
            synchronized (o2){
                System.out.println(Thread.currentThread().getName()+"已经获取了o2锁---尝试去获取o1锁");
                synchronized(o1){
                    System.out.println("已经获取了o1锁---"+Thread.currentThread().getName()+"执行完毕！！！");
                }
            }
        }
    }
}
~~~

启动

~~~java
package com.example.demo.kuangstudy.hsp.deadLock;

public class DeadLockApplication {
    public static void main(String[] args) {
        new Thread(new DeadLock(true),"A线程").start();
        new Thread(new DeadLock(false),"B线程").start();
        //AB线程都获取了对方下一步操作需要的锁，对方没有释放自己所需锁前，都无法进行下一步，导致了程序无法往下运行
        //运行结果如下：
        //A线程已经获取了o1锁---尝试去获取o2锁
		//B线程已经获取了o2锁---尝试去获取o1锁
    }
}
~~~



#### 死锁

~~~linux
在terminal中 输入
    jps -l  #查看进程
    jstack 进程号  #查看进程信息 如果该进程发生死锁 会进行报错
    
~~~





#### 公平锁与非公平锁

- 公平锁：先来先执行
- 非公平锁：可以插队 

一般默认使用非公平锁



### 反射

#### 反射调优

关闭检测 将其设为true `eat.setAccessible(true)`  //设置为true可以直接通过   取消安全检测 反射调优

~~~java
package com.example.demo.kuangstudy.hsp;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Reflect {
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {
        //普通调用
        long start = System.currentTimeMillis();
        Dog dog = new Dog();
        for (int i = 0; i < 200000000; i++) {
            dog.eat();
        }
        long end = System.currentTimeMillis();
        System.out.println("普通时长"+(end-start));

        //反射调用
        Class<?> cls = Class.forName("com.example.demo.kuangstudy.hsp.Dog");
        Object o = cls.newInstance();
        Method eat = cls.getMethod("eat");
        //eat.setAccessible(true);  //直接通过 取消安全检测 反射调优
        long start1 = System.currentTimeMillis();
        for (int i = 0; i < 200000000; i++) {
            eat.invoke(o);
        }
        long end1 = System.currentTimeMillis();
        System.out.println("反射时长："+(end1-start1));
    }
}

class  Dog{
    public void eat(){
        
    }
}
 //发现正常调用所需时间最短 其次是关闭安全检测进行反射调用 最后是不关闭进行反射调用
~~~



####  反射获取属性（包括私有属性）

创建了一个User类

~~~java
package com.example.demo.kuangstudy.hsp.reflect;

import lombok.Data;

@Data
public class User {
    private String name;
    private String pwd;
    private Integer age;
    private String hobby;
}
~~~



获取属性并打印

~~~java
package com.example.demo.kuangstudy.hsp.reflect;

public class Field {
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
        Class<?> userClass = Class.forName("com.example.demo.kuangstudy.hsp.reflect.User");
        
        Object o = userClass.newInstance();//利用反射来创建对象
        System.out.println(""+o);


        java.lang.reflect.Field[] declaredFields = userClass.getDeclaredFields();
        for (java.lang.reflect.Field declaredField : declaredFields) {
            //必须要使用setAccessible爆破 才能获取私有的属性
            declaredField.setAccessible(true);
            String key = declaredField.getName();

            Object value = declaredField.get(o);//获取对象o 对应Field的 value值
            System.out.println(key+" : "+value);

        }
		//普通创建对象，利用反射获取属性
        User user = new User();
        user.setAge(18);
        user.setHobby("swimming");
        user.setPwd("123");
        user.setName("pengyujie");

        java.lang.reflect.Field[] declaredFields1 = user.getClass().getDeclaredFields();
        for (java.lang.reflect.Field field : declaredFields1) {
            //必须要使用setAccessible爆破 才能获取私有的属性
            field.setAccessible(true);
            String key = field.getName();

            Object value = field.get(user);//获取对象user 对应Field的 value值
            System.out.println(key+" : "+value);
        }

    }
}
~~~



结果

~~~java
User(name=null, pwd=null, age=null, hobby=null)
name : null
pwd : null
age : null
hobby : null
name : pengyujie
pwd : 123
age : 18
hobby : swimming
~~~





### 其他

#### 邮件发送

~~~java
package com.example.demo.liaoxuefeng;

import com.sun.mail.util.MailSSLSocketFactory;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.security.GeneralSecurityException;
import java.util.Properties;

public class SendEmail {
    public static void main(String[] args) throws GeneralSecurityException, MessagingException {
        //简单邮件
        Properties prop = new Properties();
        prop.setProperty("mail.host","smtp.qq.com");
        prop.setProperty("mail.transport.protocol","smtp");
        prop.setProperty("mail.smtp.auth","true");

        //设置ssl加密
        MailSSLSocketFactory sf = new MailSSLSocketFactory();
        sf.setTrustAllHosts(true);
        prop.put("mail.smtp.ssl.enable","true");
        prop.put("mail.smtp.ssl.socketFactory",sf);

        /**
         * 1、创建定义整个应用程序所需要的环境信息的session对象
         * 2、通过session得到transport对象
         * 3、使用邮箱用户名和授权码 连上邮件服务器
         * 4、创建邮件
         * 5、发送邮件
         */
        Session session =Session.getDefaultInstance(prop, new Authenticator() {
            public PasswordAuthentication getPasswordAuthentication(){
                 return new  PasswordAuthentication("1933799087@qq.com","vhpgiwejeguidiib");
            }
        });

        //2、通过session得到transport对象
        Transport ts =session.getTransport();

        //3、使用邮箱用户名和授权码 连上邮件服务器
        ts.connect("smtp.qq.com","1933799087@qq.com","vhpgiwejeguidiib");

        //4、创建邮件
        MimeMessage message = new MimeMessage(session);
        message.setFrom(new InternetAddress("1933799087@qq.com"));//邮件发送人
        message.setRecipients(Message.RecipientType.TO, String.valueOf(new InternetAddress("pengyujie99@163.com")));//邮件收件人
        message.setSubject("这是一个模拟邮件");//标题

        //图片数据
        MimeBodyPart images = new MimeBodyPart();
        DataHandler dh =new DataHandler(new FileDataSource("WangYiYun.jpg"));
        images.setDataHandler(dh);
        images.setContentID("1.jpg");

        //正文数据
        MimeBodyPart text = new MimeBodyPart();
        text.setContent("<b>你好!这是一个java邮件测试！！不需要在意！！！！！</b> <img src='cid:1.jpg'>","text/html;charset=UTF-8");

        //描述数据关系
        MimeMultipart mm = new MimeMultipart();
        mm.addBodyPart(images);
        mm.addBodyPart(text);
        mm.setSubType("related");

        //设置到消息中，保存修改
        message.setContent(mm);
        message.saveChanges();//保存之后就可以发送了

        //5、发送邮件
        ts.sendMessage(message,message.getAllRecipients());

        ts.close();

    }
}
~~~





#### 线程池

线程复用，可以控制最大并发数，方便管理

核心线程数、最大线程数、队列大小 ，比作银行取钱的：开启窗口数、总窗口数、排队的座位。

~~~java
package com.example.demo.kuangstudy.pool;

import java.util.concurrent.*;

public class ThreadPool {
    public static void main(String[] args) {
//        //ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程
//        ExecutorService threadPool = Executors.newFixedThreadPool(5);//最大设置五个线程
//        //ExecutorService threadPool1 = Executors.newCachedThreadPool();//可伸缩的
//
//        for (int i = 0; i < 3; i++) {
//            threadPool.execute(()->{
//                System.out.println(Thread.currentThread().getName()+" ok");
//            });
//        }
        
        //上面不推荐使用   推荐使用下面的方法进行创建线程池
        
        /**
         * 四种拒绝策略
         * 1.AbortPolicy()  抛出异常
         * 2.CallerRunsPolicy()  哪来的回哪里 也就是由调用线程处理 
         * 3.DiscardPolicy() 丢掉任务 不抛出异常 直接抛弃
         * 4.DiscardOldestPolicy() 尝试去和最早的线程竞争 尝试做舔狗
         */
        ThreadPoolExecutor thread = new ThreadPoolExecutor(
                2,5,3, TimeUnit.SECONDS,new LinkedBlockingDeque<>(3),Executors.defaultThreadFactory(), new ThreadPoolExecutor.AbortPolicy()
        );//核心线程数  最大线程数 活跃时间 线程活跃时间单位 队列大小 默认的线程工厂 拒绝策略（共有四种）

        for (int i = 0; i < 6; i++) {//根据上面参数 可以得 正常情况为2个线程进行处理 其余进行排队（队列大小为3） 当后续又需要开启线程时（>5） 就会开启其他线程 如果后续开启 线程大于5+3 时就会进行拒绝策略
            thread.execute(() -> {
                System.out.println(Thread.currentThread().getName() + " ok");
            });
        }
    }
}
~~~



#### lambda表达式

(parameters) ->{ statements; }



#### Stream流式计算

其中有流式计算 、链式编程、函数式接口

~~~java
package com.example.demo.kuangstudy.juc;


import java.util.Arrays;
import java.util.List;

public class Stream {
    public static void main(String[] args) {
        //Stream 流式计算
        User user1 =new User(1,"a",24);
        User user2 =new User(2,"b",29);
        User user3 =new User(3,"c",23);
        User user4 =new User(4,"d",24);
        User user5 =new User(5,"e",24);
        User user6 =new User(6,"f",27);
        User user7 =new User(7,"g",28);
        User user8 =new User(8,"h",28);
        List<User> list = Arrays.asList(user1,user2,user3,user4,user5,user6,user7,user8);
        list.stream()
                .filter((u)->{return u.getAge()>24;})//年龄大于24
                .filter((u)->{return u.getId()%2==0;})//id为偶数
                .map((u)->{return u.getName().toUpperCase();})//name 改为大写
                .sorted((min,max)->{return max.compareTo(min);})//name 从大到小排序
                .limit(1)//只输出一个User
                .forEach(System.out::println);//输出
    }
}
~~~



#### 泛型接口

泛型接口与泛型类的定义及使用基本相同。泛型接口常被用在各种类的生产器中，可以看一个例子：

```java
//定义一个泛型接口
public interface Generator<T> {
    public T next();
    public String sout(T);
}
```

当实现泛型接口的类，未传入泛型实参时：



```java
/**
 * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中
 * 即：class FruitGenerator<T> implements Generator<T>{
 * 如果不声明泛型，如：class FruitGenerator implements Generator<T>，编译器会报错："Unknown class"
 */
class FruitGenerator<T> implements Generator<T>{
    @Override
    public T next() {
        return null;
    }
    
    @Override
    public String sout(T t) {
        return t.toString();
    }
    
}
```

当实现泛型接口的类，传入泛型实参时：

```java
/**
 * 传入泛型实参时：
 * 定义一个生产器实现这个接口,虽然我们只创建了一个泛型接口Generator<T>
 * 但是我们可以为T传入无数个实参，形成无数种类型的Generator接口。
 * 在实现类实现泛型接口时，如已将泛型类型传入实参类型，则所有使用泛型的地方都要替换成传入的实参类型
 * 即：Generator<T>，public T next();中的的T都要替换成传入的String类型。
 */
public class FruitGenerator implements Generator<String> {

    private String[] fruits = new String[]{"Apple", "Banana", "Pear"};

    @Override
    public String next() {
        Random rand = new Random();
        return fruits[rand.nextInt(3)];
    }
}
```



#### 对象转换为Map

~~~java
public static void main(String[] args) throws Exception{
    Car car = new Car();
    car.setId("00000");
    car.setColor("black");
    car.setModel("bmw x5");
    car.setVolume("3.0L");
    car.setYear(2018);

    System.out.println(objectToMap(car));
}

/**
 * 将Object对象里面的属性和值转化成Map对象
 *
 * @param obj
 * @return
 * @throws IllegalAccessException
 */
public static Map<String, Object> objectToMap(Object obj) throws IllegalAccessException {
    Map<String, Object> map = new HashMap<String,Object>();
    Class<?> clazz = obj.getClass();
    for (Field field : clazz.getDeclaredFields()) {
        field.setAccessible(true);
        String fieldName = field.getName();
        Object value = field.get(obj);
        map.put(fieldName, value);
    }
    return map;
}
~~~

转为 列表也是一样的原理



#### 正则表达式的使用

~~~java
package com.regexp;

import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Regexp {//正则表达式
    public static void main(String[] args) throws IOException {
        //文件流
        FileInputStream fis = new FileInputStream(new File("test.txt"));

        //管道流
        ByteArrayOutputStream baos =new ByteArrayOutputStream();

        String content =null;
        //写出文件
        byte[] buffer =new byte[1024];
        int len;
        while((len=fis.read(buffer))!=-1){
            baos.write(buffer,0,len);
        }
        content = baos.toString();

        //Pattern pattern = Pattern.compile("[a-zA-Z]+");//正则表达式
        Pattern pattern = Pattern.compile("\\d+\\.+\\d+\\.+\\d+\\.+\\d");//正则表达式 取出文本中所有IP地址

        Matcher matcher = pattern.matcher(content);

        int no=0;
        while(matcher.find()){
            System.out.println("找到："+(++no)+" "+matcher.group(0));
        }

    }

}
~~~

~~~java
 String url = "https://www.baidu.com:8080/adc/index.html";
        String regUrl = "^(http[s]?)://([a-zA-Z]+(\\.[a-zA-Z]+)+):(\\d+)/(\\w*\\/)*(\\w+\\.\\w+)$";
        Pattern pattern = Pattern.compile(regUrl);
        Matcher matcher = pattern.matcher(url);
        if(matcher.matches()){//整体匹配 取出url里的对应字段
            System.out.println("success!!");
            System.out.println("整体："+matcher.group(0));
            System.out.println("协议："+matcher.group(1));
            System.out.println("域名："+matcher.group(2));
            System.out.println("端口号："+matcher.group(4));
            System.out.println("文件名："+matcher.group(6));
        }else {
            System.out.println("fail!!");

        }
~~~





正则表达式的限定符有：

| 字符  | 描述                                                         |
| :---- | :----------------------------------------------------------- |
| *     | 匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。 |
| +     | 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。 |
| ?     | 匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。 |
| {n}   | n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。 |
| {n,}  | n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 |
| {n,m} | m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 |

举例

~~~java
		String num = "-34.89";
        String regNum = "^[+-]?([1-9]\\d*|0)+(\\.\\d+)?$";

		String email = "pengyujie99@gmail.com";
        String regStr = "^[\\w-]+@([a-zA-Z]+\\.)+[a-zA-Z]+$";//定位符 ^ $  如果不加就是整体匹配
~~~







### 集合

#### Collection

~~~java
package com.collection;

import java.util.*;

public class Collection {
    public static void main(String[] args) {

        System.out.println("=====集合测试======");

        System.out.println("=====ArrayList======");
        //List扩容机制  有参构造器会指定大小  无参默认为0
        //如果给了值（有参）就按照给的值扩容，否则（无参）就是为0，然后add第一个数据之后，扩容到10。之后每次扩容按照 1.5（原来大小+原来大小/2）进行扩容 
        //有序 可重复 可存入空值
        List list =new ArrayList();
        list.add("666");
        list.add(333);
        list.add("hello");
        list.add(null);
        list.add("hello");
        System.out.println(list);
        Iterator iterator = list.iterator();
        while(iterator.hasNext()){
            System.out.println(iterator.next());
        }

        System.out.println("=====HashSet======");
        //不可重复  可存入空值 无序 但可以存入null
        Set hashSet =new HashSet();
        hashSet.add(null);
        hashSet.add("hello");
        hashSet.add("peng");
        hashSet.add("yu");
        hashSet.add("jie");
        System.out.println(hashSet);
        for (Object o : hashSet) {
            System.out.println(o);
        }


        System.out.println("=====TreeSet======");
//        TreeSet的排列顺序与重写的compareTo()方法的返回值有关。
//        return 0:元素每次进行比较，都认为是相同的元素，这是就不再向TreeSet里面插入除第一个元素以外的元素，所以TreeSet中就只插入了一个元素。
//        return 1:元素每次进行比较，都认为新插入的元素比上一个元素大，于是二叉树存储时，会储存在根的右侧，读取时就是正序排列，先进先出。
//        return -1:元素每次进行比较，都认为新插入的元素比上一个元素小，于是二叉树存储时，会储存在根的左侧，读取时就是倒序排列，先进后出。

        //默认不可重复  可存入空值 无序 但只能存入一种格式  重写compareTo()方法之后可以多种格式 顺序和compareTo()方法有关
        Set treeSet =new TreeSet(new MyComparator());
        treeSet.add(null);
        treeSet.add("hello");
        treeSet.add("peng");
        treeSet.add("yu");
        treeSet.add("jie");
        treeSet.add("hello");
        System.out.println(treeSet);
        for (Object o : treeSet) {
            System.out.println(o);
        }
    }
}

class MyComparator implements Comparator
{   //重写compare方法
    @Override
    public int compare(Object o1, Object o2) {
        return 1;
    }
}

~~~





#### 模拟数组加链表

编写一个Node类

~~~java
package com.collection.collectionMonitor;

public class Node {
    public Object item;//存储数据
    public Node next;//下一个节点

    public Node(Object item, Node next) {
        this.item = item;
        this.next = next;
    }
}
~~~

主方法：

~~~java
package com.collection.collectionMonitor;

public class Monitor {
    public static void main(String[] args) {
        //创建一个数组 然后数组存入的对象有链表属性 模拟了一个数组加链表
        Node[] table =new Node[16];//创建一个16大小的数组
        System.out.println(table);

        Node peng = new Node("peng", null);
        table[2] = peng;//将一个Node对象存入 table数组

        Node yu = new Node("yu", null);
        peng.next = yu;//存入链表

        Node jie = new Node("jie", null);
        yu.next = jie;//存入链表

        Node hello = new Node("hello", null);
        table[3] = hello;//将一个Node对象存入 table数组
    }
}
~~~



效果如下图：

<img src="/img/notes/review/1.png" >



































































