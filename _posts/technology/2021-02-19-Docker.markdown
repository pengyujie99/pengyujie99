---
layout:     post
title:      "Docker"
subtitle:   "Docker容器化技术"
date:       2021-05-26 12:00:00
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
catalog: true
tags:
    - Docker
    - Java

---

> Docker容器化技术  
>
> 为了解决环境以及配置为问题。  
>
> 打包镜像发布测试，一键运行。  
>
> 当你开发了一个项目，要在一个新的地方进行发布、这时候你需要进行环境搭建部署。才能运行成功而使用docker直接将项目和环境一起打包，不需重新进行配置直接运行。



docker是一个 cs结构的系统，docker的守护进程运行在主机上，客户端通过socket套接字进行访问。    

docker与虚拟机的区别  

虚拟机是一套完整的操作系统上进行运行docker是利用宿主机的内核进行运行。容器是没有内核的也没有硬件。每个容器也是隔离的。



- 镜像：docker镜像就好比一个模板，通过这个模板来创建容器，一个镜像可以创建多个容器。项目运行是在容器中。

- 容器：利用容器技术可以运行一个或者一组应用，通过镜像来创建。可以启动、停止、删除。  
- 仓库：存放镜像的地方。分为公有仓库和私有仓库。



## 安装

查看内核 这里我的是用的Centos7

```shell
[root@localhost /]# uname -r
3.10.0-1160.el7.x86_64
```

根据 docker[帮助文档](https://docs.docker.com/engine/install/centos/)一步一步进行安装

```shell
#1.卸载旧版本
yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
                  
#2.需要的安装包
yum install -y yum-utils
 
#3.设置镜像的仓库
yum-config-manager \
    --add-repo \
    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo#这里使用到了阿里云的
    
#4.更新软件包索引
yum makecache fast

#5.安装docker引擎
yum install docker-ce docker-ce-cli containerd.io

#6.启动与检查
systemctl start docker

docker version
```

<img src="../../../../../img/notes/docker/1.png" >



```shell
#7.当你docker run之后
# - 1.首先会在本机寻找镜像
# - 2.有则运行，没有就会去仓库下载这个镜像到本地。
# - 3.然后在进行运行这个镜像
docker run -d hello-world

```

<img src="../../../../../img/notes/docker/2.png" >





## Docker常用命令

<img src="../../../../../img/notes/docker/3.png" >

```shell
docker info #查看docker的系统信息
docker --help #查看docker帮助命令文档
```



### 镜像命令

```shell
docker images [可选参数]#列出所有镜像  
#可选项 
	-a 所有信息 
	-q 镜像id

docker serarch mysql #搜索mysql镜像
#可选项
--filter=STARS=3000 #搜索出来的镜像的stars是大于3000的


docker pull mysql：5.7 #指定下载镜像mysql5.7

# 删除镜像
docker rmi -f 镜像id #删除指定镜像
docker rmi -f $(docker images -aq)#删除全部镜像
```



### 容器命令

> 说明：必须有了镜像才能创建容器！！!    
>
> 可以下载一个镜像来进行测试学习。

```shell
docker pull centos #pull一个centos镜像

# 新建容器并启动
docker run [可选参数] image #启动镜像
# 参数说明
--name="Name" 容器名称 tomcat01 tomcat02 来区分容器
-d			  后台方式运行
-it			  使用交互方式运行，进入容器内查看内容即启动镜像并进入容器，使用exit退出
-p 			  指定容器端口 -p 主机端口：容器端口
-P			  随机指定端口

docker ps [可选参数] # 列出所有正在运行的容器
# 参数说明
-a    # 列出所有容器（包括历史运行的）
-n=?  # 列出最近创建的容器 ？表示显示几个
-q    # 显示容器编号

# 退出容器 需要先进入容器
exit #停止容器并退出
Ctrl+P+Q #容器不停止退出

# 删除容器
docker rm 容器id#删除指定容器
docker rm -f $(docker ps -aq) #删除所有容器

# 启动和停止容器的操作
docker start 容器id   #启动容器
docker restart 容器id #重启容器
docker stop 容器id    #停止容器
docker kill 容器id    #强制停止当前容器容器
```



### 常用其他命令

```shell
docker run -d 镜像名！ # 后台启动

#注意启动容器之后，里面如果没有服务，它会自动停止。

docker top 容器id#查看容器中进程信息

docker logs -f -t --tail 容器id#查看日志
# 参数说明
-tf #显示日志
--tail number #显示日志条数

docker inspect 容器id #查看容器信息元数据
```

日志信息查看：

```shell
[root@localhost /]# docker run -d centos  /bin/sh -c "while true;do echo helloDocker; sleep 1; done"
51294bb6b4f7c534187e035d0b30108c5c9d1dfd3ba875426d0e2cc8301f8f79
[root@localhost /]# docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES
51294bb6b4f7   centos    "/bin/sh -c 'while t…"   7 seconds ago   Up 6 seconds             cool_blackwell
[root@localhost /]# docker logs -tf --tail 10 51294bb6b4f7
2021-05-28T10:32:36.254477086Z helloDocker
2021-05-28T10:32:37.275656700Z helloDocker
2021-05-28T10:32:38.284661194Z helloDocker
2021-05-28T10:32:39.293975847Z helloDocker
2021-05-28T10:32:40.301151560Z helloDocker
2021-05-28T10:32:41.304973230Z helloDocker
2021-05-28T10:32:42.313681669Z helloDocker
2021-05-28T10:32:43.321368114Z helloDocker
2021-05-28T10:32:44.338449094Z helloDocker
2021-05-28T10:32:45.358755889Z helloDocker
2021-05-28T10:32:46.365907470Z helloDocker
2021-05-28T10:32:47.382056896Z helloDocker
```

```shell
docker exec -it 容器id  #进入指定容器 可以再里面进行操作
docker attach  容器id #进入指定容器 进入容器正在执行的终端

#容器内文件与外界文件进行移动
docker cp 51294bb6b4f7:/home/test.java /home #将容器id为51294bb6b4f7 内地址为/home 的test.java文件拷贝到 本机的/home地址下。

```



## 作业

### 部署Nginx

首先在dockerhub上面查看nginx版本信息

```shell
docker pull nginx #拉取对应的nigix镜像
docker run -it -d --name nginx01 -p 3344:80 nginx#用3344端口以后台方式启动
curl localhost：3344 #查看情况
```

外网访问 虚拟机3344端口

<img src="../../../../../img/notes/docker/5.png" >

### 部署Tomcat

```shell
docker pull tomcat
docker run -d -p 3355:8080 --name tomcat01 tomcat#这一步之后发现页面不见，镜像是不完整的。需要自己进行操作

docker exec -it tomcat01 #进入容器查看
cp -r webapps.dist/* webapps#需要将webapps.dist的文件移入webapps，此时则可以访问
```

<img src="../../../../../img/notes/docker/6.png" >

### 部署es和kibanna

```shell
docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="Xms64m -Xmx512m" elasticsearch:6.7.2# -e 设置占用内存大小为64-512 也可以选择不设置

docker stats #查看cpu情况

curl localhost:9200
```

访问

<img src="../../../../../img/notes/docker/7.png" >

### Docker可视化面板Portainer安装

- portainer

  Docker的图形化界面管理工具

  

```shell
docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer  #安装
```

访问

然后创建管理员，选择local连接，就会出现如下界面

<img src="../../../../../img/notes/docker/8.png" >



## Docker自制镜像

### Docker镜像

镜像是一种轻量级、可执行的软件包，用来打包软件和软件运行环境。

如何得到镜像

- 从远程下载
- 从其他地方拷贝
- 自己制作一个镜像DockerFile



### Docker镜像加载原理

UnionFS（联合文件系统）：一次加载多个文件系统，从外面看起来只有一个文件系统，联合加载会把各层的文件系统叠加起来，最后形成的文件系统会包含所有的底层文件和目录。当你下载另一个镜像时，所需要的文件系统在另一个已经下载的镜像中存在时，就可以不需要下载。

Docker镜像加载原理：docker实际是一层层的文件系统组成，这种层级文件系统就是UnionFS。当启动一个镜像时，就会出现二层，一个你下载的镜像层（包涵多个层级）、一个容器层。所有操作都是基于容器层的，当你需要进行打包给另一个人时，就会将这二个层级再次进行一个打包。

### commit镜像

改好一个容器后，进行提交，然后就会`提交 ` 为一个新的镜像（容器id 自己定义一个容器名称:版本），以后可以以这个镜像为模板进行开发修改。

```shell
docker commit -a "提交者" -m "提交信息" 容器id 自己定义一个容器名称:版本
```



例如：

```shell
[root@localhost ~]# docker commit -a "pengyujie" -m "add webapps" 66f5b2fc75c9 tomcat02:1.0
sha256:e24ddfd0554d66241c70bf2b750bcf5c72bc138f74cbdaa40c2c206e18ed356b
[root@localhost ~]# docker images
REPOSITORY            TAG       IMAGE ID       CREATED         SIZE
tomcat02              1.0       e24ddfd0554d   7 seconds ago   672MB
nginx                 latest    d1a364dc548d   6 days ago      133MB
tomcat                latest    c43a65faae57   2 weeks ago     667MB
portainer/portainer   latest    580c0e4e98b0   2 months ago    79.1MB
hello-world           latest    d1165f221234   2 months ago    13.3kB
centos                latest    300e315adb2f   5 months ago    209MB
elasticsearch         6.7.2     2982ba071059   2 years ago     863MB
[root@localhost ~]# 
```



## Docker核心



### 容器数据卷

容器数据卷就是与主机双向绑定，实现容器的一个持久化和同步化。也就是在任意一方进行操作另一方也会自动进行一个同步操作。

如果不进行一个数据卷，那么将容器删除后，里面所保存的一个数据也会消失，但是利用数据卷，可以在主机进行一个保存。

` -v 主机目录:容器目录`将主机目录与容器目录双向绑定数据卷。

```shell
docker run -it -v /home/pengyujie/docker/centos01:/home centos /bin/bash #docker run -it -v 主机目录:容器目录 
```



安装mysql

```shell
docker run -d -p 3310:3306 -v /home/pengyujie/docker/mysql/conf:/etc/mysql/conf.d -v /home/pengyujie/docker/mysql/data:/var/lib/mysql -e 
MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7
```

windows的navicat连接到Linux容器中的mysql

<img src="../../../../../img/notes/docker/9.png" >

具名挂载和匿名挂载

```shell
#匿名挂载 就是不指定目录 -v 容器内路径
#没有指定目录的情况下都是在/var/lib/docker/volumes/xxxx/_data
docker run -d -P --name -v nginx01 /ect/nginx nginx

#具名挂载 -v 卷名：容器内路径  注意这是卷名 不是路径
#这时候在/var/lib/docker/volumes/卷名/_data
docker run -d -P --name nginx02 -v nginx02:/ect/nginx  nginx

#指定路径挂载 -v 主机路径:容器路径
```

```shell
#拓展 通过 -v 容器路径：ro 或者 -v 容器路径：rw 改变读写权限（这个权限是针对于容器的）
ro readonly #只读
rw readwrite #可读可写
```





### DockerFile

- DockerFile就是用来构建镜像的构建文件！命令脚本！自己生成一个镜像

dockerfile：

```shell
#创建一个dockerfile文件，用来写脚本
#文件中的指令必须大写
FROM centos

VOLUME ["volume1","volume2"] #匿名挂载

CMD echo "----end----"

CMD /bin/bash
#这个的每个命令就是分层的
```

```shell
docker build -f /home/pengyujie/docker/dockerfile -t pengyujie/centos:1.0 . #生成镜像
docker images #查看
```

<img src="../../../../../img/notes/docker/10.png" >

实现容器间的数据共享`--volumes-from`

```shell
docker run -it --name docker01 pengyujie/centos:1.0 #根据镜像启动一个docker01容器
docker run -it --name docker02 --volumes-from docker01 pengyujie/centos:1.0#根据镜像启动一个docker02容器 且与docker01的数据卷（volume）的内容同步 即volume1 volume2同步
```

```SHELL
docker run -it -p 3310:3306 -v /etc/mysql/conf.d -v /var/bin/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7#mysql01 
docker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7#mysql02 就是将二个容器/etc/mysql/conf.d  /var/bin/mysql下的文件进行同步
```



DockerFile的指令

```shell
FROM 		#基础镜像一切从这里开始
MAINTAINER	#镜像作者
RUN			#镜像构建需要运行的指令
WORKDIR		#镜像目录
VOLUME		#设置卷 挂载目录
EXPOSE		#暴露端口配置
#CMD是当运行时 如果那条命令是 ls  如果想要查看详细信息 需要 重新输入进行替换 ENTRYPOINT是直接在后面追加
CMD			#指定这个容器启动的时候要运行的命令，可被替代 	docker run mycentos:0.1 ls -al #替换
ENTRYPOINT  #指定这个容器启动的时候要运行的命令，可以追加指令  docker run mycentos:0.1 -al	  #追加
ONBUILD		#当构建一个被继承的dockerfile这时候就运行ONBUILD的指令
COPY		#将文件拷贝到镜像
ENV			#构建的时候设置环境变量 工作目录当进入容器后直接会进入这个目录
```



自己制作centos镜像步骤

```shell
#1.编写dockerfile文件（见下方mydockerfile文件）
#2.通过文件构建镜像
docker build -f /home/pengyujie/docker/mydockerfile -t mycentos:0.1 .
#3.启动测试运行

```



mydockerfile：

```shell
FROM centos

MAINTAINER pengyujie<pengyujie99@163.com>

ENV MYPATH /user/local
WORKDIR $MYPATH

RUN yum -y install vim  		#安装了vim 可以使用vim命令
RUN yum -y install net-tools	#安装了net-tools 可以使用ifconfig命令

EXPOSE 80

CMD echo SMYPATH
CMD echo "----end----"
CMD /bin/bash

```



<img src="../../../../../img/notes/docker/11.png" >

可以利用docker history 镜像id 进行查看这个镜像如何创建

<img src="../../../../../img/notes/docker/12.png" >



### 上传到DockerHub

```shell
#步骤：
#1.注册一个docker账号
#2.在服务器上进行登入
[root@localhost docker]# systemctl start docker
[root@localhost docker]# docker login -u pengyujie99
Password: 
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
#3.提交需要提交的镜像（注意带上用户名 docker push 仓库名/镜像：tag）
docker push pengyujie99/mycentos:2.0#用户名必须与你docker账户名相同 在这里使用pengyujie会失败
```

<img src="../../../../../img/notes/docker/13.png" >







### Docker网络

我们每启动一个容器，docker就会给它分配一个ip，我们只要安装了docker就有一个网卡docke0桥接模式，使用的技术是veth-pair技术！

veth-pair：是一对虚拟设备接口，都是成对出现，一段连着协议，一段彼此相连。

- 虚拟机：

<img src="../../../../../img/notes/docker/14.png" >

- tomcat01：

```shell
root@aa4b6fd0671b:/usr/local/tomcat# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
22: eth0@if23: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
```

- tomcat02:

```shell
root@2fad426b2abf:/usr/local/tomcat# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
26: eth0@if27: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
```

- 容器之间ping的通

  <img src="../../../../../img/notes/docker/15.png" >



Docker使用的是桥接，容器与容器间可以ping通，但它不是直接通信，而是通过docker0进行通信。容器1可以通过veth-pair与docker0通信，docker0再通过veth-pair与另一个容器2通信，就完成了容器1与容器2的通信。



自定义网络

网络模式：

- bridge：桥接模式（docker默认的模式）

- none：不配置网络

- host：和宿主机共享网络



```shell
#自定义网络
#--driver bridge 	   		桥接
#--subnet 192.168.0.1/16    子网地址
#--gateway 192.168.0.1 		网关
docker network create --driver bridge --subnet 192.168.0.1/16 --gateway 192.168.0.1 mynet
docker network ls #查看网络
docker network inspect mynet #查看mynet的信息
#启动二个容器 将容器放在自己网络下
docker run -d -p 8080:8080 --name tomcat01-net --net mynet tomcat
docker run -d -P --name tomcat02-net --net mynet tomcat
docker network inspect mynet #查看mynet的信息 发现该网络下以及有了二个容器的信息
#此时可以互相ping通 使用地址名字都可以相互ping通
[root@localhost docker]# docker exec -it tomcat01-net ping tomcat02-net
PING tomcat02-net (192.168.0.3) 56(84) bytes of data.
64 bytes from tomcat02-net.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.058 ms
64 bytes from tomcat02-net.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.083 ms
```

好处：使用docker搭建集群

redis集群是一个网络 - 不同集群使用不同的网络，保证集群是安全的和健康的。

mysql集群是一个网络 - 不同集群使用不同的网络，保证集群是安全的和健康的。

不同的集群可以通过网络连通。



网络连通

```shell
docker network connect 网络名 容器名 #将容器放到了网络下，就可以访问该网络
#如下所示：
[root@localhost docker]# docker exec -it tomcat01 ping tomcat01-net
ping: tomcat01-net: Name or service not known
#将tomcat01放到了mynet网络下，就可以访问mynet
[root@localhost docker]# docker network connect mynet tomcat01
[root@localhost docker]# docker exec -it tomcat01 ping tomcat01-net
PING tomcat01-net (192.168.0.2) 56(84) bytes of data.
64 bytes from tomcat01-net.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.175 ms
64 bytes from tomcat01-net.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.095 ms
64 bytes from tomcat01-net.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.061 ms
^C
--- tomcat01-net ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 4ms
rtt min/avg/max/mdev = 0.061/0.110/0.175/0.048 ms
```



## 卸载

```shell
# 卸载依赖
yum remove docker-ce docker-ce-cli containerd.io
# 卸载资源
rm -rf /var/lib/docker
```













