---
layout:     post
title:      "MySQL"
subtitle:   "MySQL数据库"
date:       2021-08-01 12:00:00
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
catalog: true
tags:
    - Docker
    - Java


---

> MySQL默认使用的引擎是innodb



|            | MYISAM         | INNODB         |
| ---------- | -------------- | -------------- |
| 事务       | 不支持         | 支持           |
| 数据行锁   | 不支持（表锁） | 支持           |
| 外键约束   | 不支持         | 支持           |
| 全文索引   | 支持           | 不支持         |
| 表空间大小 | 较小           | 是MYISAM的二倍 |





语法

~~~sql
--DML语句
--表操作
CREATE TABLE B--创建表
(ID INT,
NAME VARCHAR(20));

DELETE B--删除表内容
ALTER TABLE B ADD email Varchar(20);--表添加一个字段

DELETE FROM B--删除表内容
DELETE B--删除表内容
TRUNCATE TABLE B --删除表内容 保留结构，与上面的区别是无法rollback 和hwm标记复位

ALTER TABLE B ADD email Varchar(20);--表添加一个字段
DROP TABLE B; --删除表
ALTER TABLE B DROP COLUMN email;--表删除一个字段
--数据操作
INSERT INTO B VALUES(1,'zhangsan');--添加一行数据
INSERT INTO B VALUES(2,'lisi');
INSERT INTO B VALUES(3,'pengyujie',1933799087)
DELETE --删除一行数据
FROM B
WHERE B.Id=1
UPDATE B SET email='1933799087@qq.com'--修改数据
WHERE B.ID=3
SELECT * FROM B ;--查询
--用户
GRANT USER user_name IDENTIFIED BY user_password--创建用户
GRANT CREATE TABLE TO user_name--授权给用户
-----
~~~



#### 表操作

##### 修改表

~~~sql
ALTER TABLE B RENAME AS A; --修改表名
ALTER TABLE B ADD email Varchar(20);--表添加一个字段--增加字段
ALTER TABLE B MODIFY ID INT NOT NULL;--修改表字段 修改约束
ALTER TABLE B CHANGE NAME NAME1 VARCHAR(100);--修改表字段 修改名称 属性
ALTER TABLE B DROP NAME;
~~~



##### 删除表

~~~sql
DELETE FROM B--删除表内容
DELETE B--删除表内容
TRUNCATE TABLE B --删除表内容 保留结构，与上面的区别是无法rollback 和hwm标记复位
~~~





#### 数据操作

##### DML语句

~~~sql
INSERT INTO B VALUES(1,'PENG');--增加 插入一条数据
DELETE FROM B WHERE ID = 1; --删除 删除一条数据
UPDATE B SET NAME='PENGYUJIE' WHERE ID = 1; --修改 修改一条数据
SELECT * FROM B WHERE ID = 1 -- 查询

--模糊查询运算符
IS NULL --操作为NULL 结果为真
IS NOT NULL --操作不为NULL 结果为真
LIKE --匹配 可以结合符号使用 % 表示多个字符   _ 表示一个字符
NOT LIKE --不匹配
IN --表示范围
BETWEEN A AND B--在AB之间 结果为真

--左右连接
SELECT s.studentNo s.studentName 
FROM student s 
left join result r
on s.studentNo = r.studentNo --左连接 就是以左表为基础 右表进行补充没有匹配就返回null

SELECT s.studentNo s.studentName 
FROM student s 
right join result r
on s.studentNo = r.studentNo --右连接 就是以右表为基础 左表进行补充没有匹配就返回null

SELECT s.studentNo s.studentName 
FROM student s 
inner join result r
on s.studentNo = r.studentNo --内连接 就求二张表的交集

自连接（将一张表当做二张表去 查询）
~~~



##### 添加外键约束

~~~SQL
ALTER TABLE 表名 
ADD CONSTRAINT 约束名 FOREIGN KEY(作为外键的列) REFERENCES 哪个表(哪个字段)

~~~



##### 创建索引

~~~sql
create index index_student_name on student(name);--create index 索引名 on 表名(字段名)

--索引原则
不要对经常变动的数据加索引 
小数据量的表没必要加索引（效果不明显）
索引一般加在常用的数据上

~~~









#### 事务

ACID（原子性 一致性 隔离性 持久性）

- 脏读

读到了 事务未提交前的数据

比如  最开始 AB 各有一百块钱 ，A给B转100 ，此时B变为200，事务未提交。此时读到B的数据却是200。一旦A进行回滚（由于未提交）,那么实际正确的是B应该是100。读取到的是错误的脏数据。



- 不可重复读

多次读，读到了不同的数据

比如  读取B的数据，但是由于A 、C都在给B转钱，导致读取出的数据不一致。



- 幻读

读取的数据，多了或者少了一行

比如 读取每个人的数据，突然多出来一个人的数据。





#### 数据库备份



1.直接拷贝物理文件

2.在可视化工具中右键导出

3.在cmd 利用mysqldump导出



#### JDBC

由于每一种数据库都有对应的驱动，对此sun公司开发一个统一规范去操作数据库，开发者去熟悉即可，也就是jdbc。

数据版本不同，maven对应导入的驱动版本也应该不同。









建表sql举例 

~~~sql
CREATE TABLE `b_fumin_account_detail` (
	`id` INT ( 11 ) NOT NULL AUTO_INCREMENT COMMENT '账务明细查询接口信息表id',
	`merchant_id` VARCHAR ( 32 ) NOT NULL COMMENT '商户id',
	`merchant_no` VARCHAR ( 32 ) NOT NULL COMMENT '商户号',
	`trade_no` VARCHAR ( 32 ) UNIQUE COMMENT '交易流水号',
	`amount` VARCHAR ( 15 ) DEFAULT '0' NULL COMMENT '交易金额',
	`sub_trade_type` TINYINT ( 4 ) COMMENT '交易类型  1.充值，3.提现，13.购买理财，14.赎回理财，20 富多利购买 21富多利支取 ',
	`trade_status` TINYINT ( 4 ) COMMENT '交易状态  0处理中 1成功 2失败 3拒绝 4取消',
	`product_code` VARCHAR ( 32 ) NOT NULL COMMENT '产品编码',
	`payment_msg` VARCHAR ( 32 ) DEFAULT NULL COMMENT '交易失败描述',
	`trade_remark` VARCHAR ( 80 ) DEFAULT NULL COMMENT '交易备注',
	`name_in` VARCHAR ( 16 ) DEFAULT NULL COMMENT '入账方姓名',
	`account_in` VARCHAR ( 32 ) DEFAULT NULL COMMENT '入账方账号',
	`name_out` VARCHAR ( 16 ) DEFAULT NULL COMMENT '出账方姓名',
	`createoperator` VARCHAR ( 30 ) NOT NULL DEFAULT '' COMMENT '操作人员名称',
	`createoperator_id` TINYINT ( 4 ) NOT NULL COMMENT '操作人员id',
	`account_out` VARCHAR ( 32 ) NOT NULL COMMENT '出账方账号',
	`payment_method` VARCHAR ( 4 ) DEFAULT '' COMMENT '支付方式',
	`card_type` VARCHAR ( 4 ) DEFAULT NULL COMMENT '卡类型',
	`bank_name` VARCHAR ( 20 ) DEFAULT '' COMMENT '银行名称',
	`bank_code` VARCHAR ( 20 ) DEFAULT '' COMMENT '银行简称',
	`create_time` datetime  COMMENT '交易创建时间',
	`finish_time` datetime  COMMENT '交易完成时间',
	`createtime` datetime NOT NULL COMMENT '创建时间：yyyy-MM-dd HH:mm:ss',
	`updatetime` datetime NOT NULL COMMENT '更新时间：yyyy-MM-dd HH:mm:ss',
	PRIMARY KEY ( `id` ),
	UNIQUE KEY `key_trade_no` ( `trade_no` ) USING BTREE,
	KEY `merchant_id` ( `merchant_id` ) USING BTREE,
	KEY `merchant_no` ( `merchant_no` ) USING BTREE,
	KEY `product_code` ( `product_code` ) USING BTREE 
) ENGINE = INNODB DEFAULT CHARSET = utf8mb4 COMMENT = '账务明细表';
~~~





































