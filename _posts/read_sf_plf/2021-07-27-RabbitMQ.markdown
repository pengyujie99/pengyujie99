---
layout:     post
title:      "RabbitMQ"
subtitle:   "消息中间件"
date:       2021-07-27
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
tags:
  - Java
  - 中间件
---



>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。



#### RabbitMQ

<img src="/img/notes/RabbitMQ/1.png">

流程：就是发送方 将消息发送到交换机，交换机通过对应的Routing Key，将数据发送到对应的Queue，然后由Consumer来进行取消息。

​	1. Publisher：即数据的发送方

一般一个Message有两个部分：payload（有效载荷）和label（标签），payload顾名思义就是传输的数据，label是exchange的名字或者说是一个tag，它描述了payload，而且RabbitMQ也是通过这个label来决定把这个Message发给哪个Consumer

​	2. Exchange : 消息交换机

exchange从生产者那收到消息后，一般会指定一个Routing Key，来指定这个消息的路由规则。Message消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。

​	3. binding：即绑定

在绑定（Binding）Exchange与Queue的同时，一般会指定一个Binding key;

但Binding key并不是在所有情况下都生效，它依赖于Exchange Type

​	4. Queue：即队列

是rabbitmq内部对象，用于存储消息；

消息最终被送到这里等待consumer取走。一个message可以被同时拷贝到多个queue中。

那么谁应该负责创建这个queue呢？是Consumer，还是Producer？

> 如果queue不存在，当然Consumer不会得到任何的Message。那么Producer Publish的Message会被丢弃。所以，还是为了数据不丢失，Consumer和Producer都try to create the queue！反正不管怎么样，这个接口都不会出问题。
> queue对load balance的处理是完美的。对于多个Consumer来说，RabbitMQ 使用循环的方式（round-robin）的方式均衡的发送给不同的Consumer。

​	5. Connection与Channel：两者都是RabbitMQ对外提供的API中最基本的对象

**Connection**就是一个TCP的连接，Publisher和Consumer都是通过TCP连接到RabbitMQ Server的

**Channel**是建立在上述的TCP连接中，因为建立TCP Connection的开销将是巨大的，所以是节省开销；

Channel是我们与RabbitMQ打交道的最重要的一个接口，我们大部分的业务操作是在Channel这个接口中完成的，包括定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等

​	6. Consumer：即数据的接收方

如果有多个消费者同时订阅同一个Queue中的消息，Queue中的消息会被平摊给多个消费者

​	7. Broker: 即RabbitMQ Server

其作用是维护一条从Publisher到Consumer的路线，保证数据能够按照指定的方式进行传输

​	8. Virtual host：即虚拟主机

当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange／queue



#### 消息发送模式

生产者（Producer）发送->中间件->消费者（Consumer）接收消息。

RabbitMQ包括五种队列模式，简单队列、工作队列、发布/订阅、路由、主题、rpc等。

1、简单队列
（1）生产者将消息发送到队列，消费者从队列获取消息。

（2）一个队列对应一个消费者。

<img src="/img/notes/RabbitMQ/2.png">



2、工作队列
（1）一个生产者，多个消费者。

（2）一个消息发送到队列时，只能被一个消费者获取。

（3）多个消费者并行处理消息，提升消息处理速度。

        注意:channel.basicQos(1)表示同一时刻只发送一条消息给消费者。

<img src="/img/notes/RabbitMQ/3.png">



3、发布/订阅模式(Publish/Subcribe)
将消息发送到交换机，队列从交换机获取消息，队列需要绑定到交换机。

（1）一个生产者，多个消费者。

（2）每一个消费者都有自己的一个队列。

（3）生产者没有将消息直接发送到队列，而是发送到交换机。

（4）每一个队列都要绑定到交换机。

（5）生产者发送的消息，经过交换机到达队列，实现一个消息被多个消费者获取的目的。

（6）交换机类型为“fanout”。

        注意：交换机本身没有存储消息的能力，消息只能存储到队列中。

<img src="/img/notes/RabbitMQ/4.png">



 

4、路由模式（Routing）
路由模式是发布/订阅模式的一种特殊情况。

（1）路由模式的交换机类型为“direct”。

（2）绑定队列到交换机时指定 key，即路由键，一个队列可以指定多个路由键。

（3）生产者发送消息时指定路由键，这时，消息只会发送到绑定的key的对应队列中。

<img src="/img/notes/RabbitMQ/5.png">



5、主题模式（Topic）
将路由键和某模式进行匹配。此时，队列需要绑定到一个模式上。

符号“#”匹配一个或多个词，“*”匹配不多不少一个词。

 绑定队列到交换机指定key时，进行通配符模式匹配。

<img src="/img/notes/RabbitMQ/6.png">



#### Exchange

Direct Exchange 直连交换机

完全匹配，单播模式。当Routing Key与binding Key 一致时，交换机就会将消息发送到对应的Queue中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。

<img src="/img/notes/RabbitMQ/7.png">



Fanout Exchange 扇形交换机

全部发送。不需要考虑交换机Routing Key与 binding Key的关系，每个发送到该交换机的消息，都会被他发送到所有与他进行关联的Queue上。

<img src="/img/notes/RabbitMQ/8.png">



Topic Exchange 主题交换机

模糊匹配。交换机Routing Key与 binding Key进行模糊匹配，交换机上的消息的Routing Key与关联Queue的binding Key进行匹配，它同样也会识别两个通配符：符号“#”和符号“*”。

- *表示一个单词
- \#表示任意数量（零个或多个）单词。

如下图

<img src="/img/notes/RabbitMQ/9.png">





#### RabbitMQ 安装

一般来说安装 RabbitMQ 之前要安装 Erlang ，可以去[Erlang官网](https://link.jianshu.com?t=http://www.erlang.org/downloads)下载。接着去[RabbitMQ官网](https://link.jianshu.com?t=https://www.rabbitmq.com/download.html)下载安装包，之后解压缩即可。根据操作系统不同官网提供了相应的安装说明：[Windows](https://link.jianshu.com?t=http://www.rabbitmq.com/install-windows.html)、[Debian / Ubuntu](https://link.jianshu.com?t=http://www.rabbitmq.com/install-debian.html)、[RPM-based Linux](https://link.jianshu.com?t=http://www.rabbitmq.com/install-rpm.html)、[Mac](https://link.jianshu.com?t=http://www.rabbitmq.com/install-standalone-mac.html)



#### RabbitMQ 运行和管理

1. 启动
    启动很简单，找到安装后的 RabbitMQ 所在目录下的 sbin 目录，可以看到该目录下有6个以 rabbitmq 开头的可执行文件，直接执行 rabbitmq-server 即可，下面将 RabbitMQ 的安装位置以 . 代替，启动命令就是：



```undefined
./sbin/rabbitmq-server
```

启动正常的话会看到一些启动过程信息和最后的 completed with 7 plugins，这也说明启动的时候默认加载了7个插件。



<img src="/img/notes/RabbitMQ/10.png">

正常启动

​	2.后台启动
 如果想让 RabbitMQ 以守护程序的方式在后台运行，可以在启动的时候加上 -detached 参数：



```undefined
./sbin/rabbitmq-server -detached
```

​	3.查询服务器状态
 sbin 目录下有个特别重要的文件叫 rabbitmqctl ，它提供了 RabbitMQ 管理需要的几乎一站式解决方案，绝大部分的运维命令它都可以提供。
 查询 RabbitMQ 服务器的状态信息可以用参数 status ：



```undefined
./sbin/rabbitmqctl status
```

该命令将输出服务器的很多信息，比如 RabbitMQ 和 Erlang 的版本、OS 名称、内存等等

4.关闭 RabbitMQ 节点
 我们知道 RabbitMQ 是用 Erlang 语言写的，在Erlang 中有两个概念：节点和应用程序。节点就是 Erlang 虚拟机的每个实例，而多个 Erlang 应用程序可以运行在同一个节点之上。节点之间可以进行本地通信（不管他们是不是运行在同一台服务器之上）。比如一个运行在节点A上的应用程序可以调用节点B上应用程序的方法，就好像调用本地函数一样。如果应用程序由于某些原因奔溃，Erlang 节点会自动尝试重启应用程序。
 如果要关闭整个 RabbitMQ 节点可以用参数 stop ：



```undefined
./sbin/rabbitmqctl stop
```

它会和本地节点通信并指示其干净的关闭，也可以指定关闭不同的节点，包括远程节点，只需要传入参数 -n ：



```dart
./sbin/rabbitmqctl -n rabbit@server.example.com stop 
```

-n node 默认 node 名称是 rabbit@server ，如果你的主机名是 [server.example.com](https://link.jianshu.com?t=http://server.example.com) ，那么 node 名称就是 [rabbit@server.example.com](https://link.jianshu.com?t=mailto:rabbit@server.example.com) 。

​	5.关闭 RabbitMQ 应用程序
 如果只想关闭应用程序，同时保持 Erlang 节点运行则可以用 stop_app：



```undefined
./sbin/rabbitmqctl stop_app
```

这个命令在后面要讲的集群模式中将会很有用。

6.启动 RabbitMQ 应用程序



```undefined
./sbin/rabbitmqctl start_app
```

7.重置 RabbitMQ 节点



```undefined
./sbin/rabbitmqctl reset
```

该命令将清除所有的队列。

8.查看已声明的队列



```undefined
./sbin/rabbitmqctl list_queues
```

9.查看交换器



```undefined
./sbin/rabbitmqctl list_exchanges
```

该命令还可以附加参数，比如列出交换器的名称、类型、是否持久化、是否自动删除：



```rust
./sbin/rabbitmqctl list_exchanges name type durable auto_delete
```

​	10.查看绑定



```undefined
./sbin/rabbitmqctl list_bindings
```





#### Java 客户端访问

RabbitMQ 支持多种语言访问，以 Java 为例看下一般使用 RabbitMQ 的步骤。

​	1. maven工程的pom文件中添加依赖



```xml
<dependency>
    <groupId>com.rabbitmq</groupId>
    <artifactId>amqp-client</artifactId>
    <version>4.1.0</version>
</dependency>
```

​	2. 消息生产者



```dart
package org.study.rabbitmq;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import java.io.IOException;
import java.util.concurrent.TimeoutException;
public class Producer {

    public static void main(String[] args) throws IOException, TimeoutException {
        //创建连接工厂
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername("guest");
        factory.setPassword("guest");
        //设置 RabbitMQ 地址
        factory.setHost("localhost");
        //建立到代理服务器到连接
        Connection conn = factory.newConnection();
        //获得信道
        Channel channel = conn.createChannel();
        //声明交换器
        String exchangeName = "hello-exchange";
        channel.exchangeDeclare(exchangeName, "direct", true);

        String routingKey = "hola";
        //发布消息
        byte[] messageBodyBytes = "quit".getBytes();
        channel.basicPublish(exchangeName, routingKey, null, messageBodyBytes);

        channel.close();
        conn.close();
    }
}
```

​	3. 消息消费者



```dart
package org.study.rabbitmq;
import com.rabbitmq.client.*;
import java.io.IOException;
import java.util.concurrent.TimeoutException;
public class Consumer {

    public static void main(String[] args) throws IOException, TimeoutException {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setUsername("guest");
        factory.setPassword("guest");
        factory.setHost("localhost");
        //建立到代理服务器到连接
        Connection conn = factory.newConnection();
        //获得信道
        final Channel channel = conn.createChannel();
        //声明交换器
        String exchangeName = "hello-exchange";
        channel.exchangeDeclare(exchangeName, "direct", true);
        //声明队列
        String queueName = channel.queueDeclare().getQueue();
        String routingKey = "hola";
        //绑定队列，通过键 hola 将队列和交换器绑定起来
        channel.queueBind(queueName, exchangeName, routingKey);

        while(true) {
            //消费消息
            boolean autoAck = false;
            String consumerTag = "";
            channel.basicConsume(queueName, autoAck, consumerTag, new DefaultConsumer(channel) {
                @Override
                public void handleDelivery(String consumerTag,
                                           Envelope envelope,
                                           AMQP.BasicProperties properties,
                                           byte[] body) throws IOException {
                    String routingKey = envelope.getRoutingKey();
                    String contentType = properties.getContentType();
                    System.out.println("消费的路由键：" + routingKey);
                    System.out.println("消费的内容类型：" + contentType);
                    long deliveryTag = envelope.getDeliveryTag();
                    //确认消息
                    channel.basicAck(deliveryTag, false);
                    System.out.println("消费的消息体内容：");
                    String bodyStr = new String(body, "UTF-8");
                    System.out.println(bodyStr);

                }
            });
        }
    }
}
```

​	4. 启动 RabbitMQ 服务器



```undefined
./sbin/rabbitmq-server
```

1. 运行 Consumer
    先运行 Consumer ，这样当生产者发送消息的时候能在消费者后端看到消息记录。

2. 运行 Producer
    接着运行 Producer ,发布一条消息，在 Consumer 的控制台能看到接收的消息：

   <img src="/img/notes/RabbitMQ/11.png">





