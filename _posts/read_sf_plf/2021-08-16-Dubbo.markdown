---
layout:     post
title:      "Dubbo"
subtitle:   "Dubbo框架"
date:       2021-08-16 12:00:00
author:     "Pengyujie"
header-img: "img/tag-bg.jpg"
catalog: true
tags:
    - Dubbo
    - Java
    - 中间件


---

## Dubbo

> Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。由阿里开发随后捐给了Apache，现在由Apache进行维护。其实 dubbo 的作用简单来说就是给消费端提供接口



<img src="https://dubbo.apache.org/imgs/architecture.png" alt="img" style="zoom: 50%;" />

**节点角色说明：**

Consumer：服务调用者

Provider：服务提供者

Registry：注册中心

Monitor：监控中心

Container：运行容器



**调用关系说明：**

- 0、服务容器负责启动，加载，运行服务提供者。
- 1、服务提供者在启动时，向注册中心注册自己提供的服务。
- 2、服务消费者在启动时，向注册中心订阅自己所需的服务。
- 3、注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
- 4、服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
- 5、服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。



### Dubbo 架构具有以下几个特点

分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。



- 注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小
- 监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示
- 服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销
- 服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销
- 注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外
- 注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者
- 注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表
- 注册中心和监控中心都是可选的，服务消费者可以直连服务提供者









## DubboDemo演示

演示使用的dubbo+nacos

首先编写一个api模块、 一个provider模块  、一个consumer模块 

api模块包括基本的dao层和service接口，consumer包括controller层，provider包括接口的实现



api模块

dao层：

~~~java
package com.peng.api.dao;

import lombok.Data;

import java.io.Serializable;

@Data
public class User implements Serializable {
    private Integer id;
    private String name;
}
~~~



service接口层：

~~~java
package com.peng.api.service;

import com.peng.api.dao.User;

public interface UserService {
    User selectUserById(Integer id);
}
~~~



consumer模块

controller层：（**注入方式选择@Reference 且是dubbo的Reference** ）

~~~java
package com.peng.consumer.controller;


import com.peng.api.dao.User;
import com.peng.api.service.UserService;
import org.apache.dubbo.config.annotation.Reference;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class DubboTest {

    //会拉取注册中心的服务缓存到本地，即使注册中心宕机了，之前的服务也可以使用，但是无法添加新的服务
    @Reference(version = "1.0.0",parameters = {"unicast","false"})
    UserService userService;

    @RequestMapping("select")
    public User select(){//最后返回的是一个User
        return userService.selectUserById(1);
    }
}
~~~



application.yml

~~~yaml
#为了避免端口重复
server:
  port: 8080

#dubbo配置 name dubbo名称 registry注册中心地址 后面一般默认账户密码为nacos
dubbo:
  application:
    name: consumer
  registry:
    address: nacos://127.0.0.1:8848/?username=nacos&password=nacos
~~~



provider模块

impl层：（**@Service是dubbo的Service 后面标注版本信息和接口属性，方便注入和迭代**）

~~~java
package com.peng.provider.impl;

import com.peng.api.dao.User;
import com.peng.api.service.UserService;
import org.apache.dubbo.config.annotation.Service;

@Service(version = "1.0.0",interfaceClass = UserService.class)
public class UserServiceImpl implements UserService {
    @Override
    public User selectUserById(Integer id) {
        User user = new User();
        user.setId(999);
        user.setName("渣渣辉");
        return user;
    }
}
~~~



application.yml

~~~yaml
#服务端口号
server:
  port: 9090
spring:
  application:
    name: dubbo-provider

#启动时检查提供者是否存在，true报错，false忽略  base-packages暴露接口的地址 protocol协议端口号和name
dubbo:
  consumer:
    check: false
  scan:
    base-packages: com.peng.provider.impl
  application:
    name: provider
  registry:
    address: nacos://127.0.0.1:8848/?username=nacos&password=nacos
  protocol:
    port: 20880
    name: dubbo
~~~



启动步骤：

1.启动nacos（需要下载）

2.先启动provider

3.在启动consumer

























